# Taskfile.yml
version: "3"

dotenv: ['.env', '.env.local']

vars:
  BACKEND_DIR: ./backend
  FRONTEND_DIR: ./frontend
  BUILD_DIR: ./backend/bin
  BINARY_NAME: api
  GO_FILES: ./backend/cmd/api/main.go

  # Database variables
  # MIGRATIONS_DIR: ./backend/sql/migrations/
  # GOOSE_DRIVER: postgres
  GOOSE_FLAGS: -s  # Sequential ordering


# Hide task execution statements | true = hide, false = show (default)
# silent: true

tasks:
  default:
    desc: "Show available tasks"
    cmds:
      - task --list

  # Setup
  setup:
    desc: "Initial project setup"
    cmds:
      - task: _setup:env
      - task: frontend:deps
      - task: backend:tidy
      - task: db:apply
      - task: sqlc:generate

  # =====================================
  # Database tasks (Goose)
  # =====================================
  
  db:up:
    desc: "Applies database migrations. Use `task db:up` to apply all pending migrations or `task db:up -- <version>` to migrate to a specific version."
    cmds:
      - |
        {{if .CLI_ARGS}}
        goose up-to {{.CLI_ARGS}}
        {{else}}
        goose up
        {{end}} 


  # db:up1:
  #   desc: "Migrate the DB up by 1"
  #   cmds:
  #     - goose up-by-one
  #
  # db:up-to:
  #   desc: "Migrate the DB to a specific VERSION (use: task db:down-to -- migration_name)"
  #   cmds:
  #     - goose up-to {{.CLI_ARGS}}

  db:down:
    desc: "Rollback the last migration"
    cmds:
      - goose down

  db:down-to:
    desc: "Migrate the DB to a specific VERSION (use: task db:down-to -- migration_name)"
    cmds:
      - goose down-to {{.CLI_ARGS}}

  db:status:
    desc: "Show migration status"
    cmds:
      - goose status

  db:create:
    desc: "Create new migration (use: task db:create -- migration_name)"
    cmds:
      - goose {{.GOOSE_FLAGS}} -dir {{.GOOSE_MIGRATIONS_DIR}} create {{.CLI_ARGS}} sql

  db:reset:
    desc: "Reset database (rollback all migrations)"
    prompt: "This will rollback all migrations. Are you sure?"
    cmds:
      - goose  reset

  db:redo:
    desc: "Rollback and re-apply the last migration"
    cmds:
      - goose  redo

  db:version:
    desc: "Show current migration version"
    cmds:
      - goose version

  db:fix:
    desc: "Fix sequential numbering of migration files"
    cmds:
      - goose fix

  db:validate:
    desc: "Check migration files without running them"
    cmds:
      - goose validate
  
  # =====================================
  # SQLC tasks
  # =====================================
  
  sqlc:
    desc: "Generate Go code from SQL"
    dir: "{{.BACKEND_DIR}}"
    silent: true
    cmds:
      - sqlc generate
      - echo "sqlc generate completed."


  # =====================================
  # Backend tasks
  # =====================================
  
  go:tidy:
    desc: "Tidy Go modules"
    dir: "{{.BACKEND_DIR}}"
    cmds:
      - go mod tidy

  go:build:
    desc: "Build Go binary"
    dir: "{{.BACKEND_DIR}}"
    cmds:
      - go build -o ./tmp/main ./cmd/api/main.go
    sources:
      - "**/*.go"
      - go.mod
      - go.sum
    generates:
      - "{{.BUILD_DIR}}/{{.BINARY_NAME}}"

  go:dev:
    desc: "Run backend with hot reload (Air)"
    dir: "{{.BACKEND_DIR}}"
    cmds:
      - air

  go:run:
    desc: "Build and run backend"
    cmds:
      - task: backend:build

  # =====================================
  # Frontend tasks (Bun + Vite)
  # =====================================

  bun:install:
    desc: "Install frontend dependencies (use -- <package> to install specific)"
    dir: "{{.FRONTEND_DIR}}"
    cmds:
      - |
        if [ "{{.CLI_ARGS}}" != "<no value>" ]; then
          bun add {{.CLI_ARGS}}
        else
          bun install
        fi

  bun:dev:
    desc: "Run frontend development server"
    dir: "{{.FRONTEND_DIR}}"
    cmds:
      - bun run dev

  bun:build:
    desc: "Build frontend for production"
    dir: "{{.FRONTEND_DIR}}"
    cmds:
      - bun run build

  bun:preview:
    desc: "Preview production build"
    dir: "{{.FRONTEND_DIR}}"
    deps: [bun:build]
    cmds:
      - bun run preview

  
  # =====================================
  # Build everything
  # =====================================

  build:
    desc: "Build both backend and frontend"
    cmds:
      - task: backend:build
      - task: frontend:build


  # =====================================
  # Testing
  # test:
  #   desc: "Run all tests"
  #   cmds:
  #     - task: _test:backend
  #     - task: _test:frontend



  # =====================================
  # Utilities
  # =====================================

  clean:
    desc: "Clean build artifacts"
    cmds:
      - rm -rf {{.BACKEND_DIR}}/{{.BUILD_DIR}}
      - rm -rf {{.BACKEND_DIR}}/tmp
      - rm -rf {{.FRONTEND_DIR}}/build
      - rm -rf {{.FRONTEND_DIR}}/dist
      - rm -rf {{.FRONTEND_DIR}}/.svelte-kit
      - task: go:tidy

  health:
    desc: "Check if backend is running"
    cmds:
      - curl -f http://localhost:{{.PORT}}/health || echo "Backend not running"

