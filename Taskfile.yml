# Taskfile.yml
version: "3"

dotenv: [".env", ".env.local"]

vars:
  BACKEND_DIR: ./backend
  FRONTEND_DIR: ./frontend
  BUILD_DIR: ./backend/bin
  BINARY_NAME: api
  GO_FILES: ./backend/cmd/api/main.go

  GO_GROUP: " GO"
  BUN_GROUP: "  BUN"

  # Database variables
  # GOOSE_MIGRATIONS_DIR: ./backend/sql/migrations/
  # GOOSE_DRIVER: postgres
  GOOSE_FLAGS: -s # Sequential ordering

# Hide task execution statements | true = hide, false = show (default)
# silent: true

tasks:
  default:
    desc: "Show available tasks"
    cmds:
      - task --list

  project:setup:
    desc: "Initial project setup"
    cmds:
      - task: go:tidy
      - task: db:reset
      - task: db:up
      - task: sqlc

  dev:setup:
    desc: Ensures Podman machine is running, then runs the dev:next task.
    cmds:
      - echo "Attempting to start Podman machine. This may show an 'already running' error, but it's expected and will be ignored."
      - task: podman:start
      - task: podman:up

  podman:start:
    desc: "Start podman machine"
    platforms: [darwin]
    internal: true
    silent: true
    cmds:
      - echo "Starting Podman machine"
      - podman machine start || true

  podman:stop:
    desc: "Stop podman machine"
    cmds:
      - echo "Stopping Podman machine"
      - podman machine stop

  podman:up:
    desc: "Run compose file"
    cmds:
      - echo "Starting compose containers"
      - podman compose up -d

  podman:down:
    desc: "Stop compose containers"
    cmds:
      - echo "Stopping compose containers"
      - podman compose down

  # =====================================
  # Database tasks (Goose)
  # =====================================

  db:create:
    desc: "Create new migration (use: task db:create -- migration_name)"
    cmds:
      - goose {{.GOOSE_FLAGS}} -dir {{.GOOSE_MIGRATION_DIR}} create {{.CLI_ARGS}} sql
    requires:
      vars: [GOOSE_MIGRATION_DIR]

  db:up:
    desc: "Applies database migrations. Use `task db:up` to apply all pending migrations or `task db:up -- <version>` to migrate to a specific version."
    cmds:
      - |
        {{if .CLI_ARGS}}
        goose up-to {{.CLI_ARGS}}
        {{else}}
        goose up
        {{end}}

  # db:up1:
  #   desc: "Migrate the DB up by 1"
  #   cmds:
  #     - goose up-by-one
  #
  # db:up-to:
  #   desc: "Migrate the DB to a specific VERSION (use: task db:down-to -- migration_name)"
  #   cmds:
  #     - goose up-to {{.CLI_ARGS}}

  db:down:
    desc: "Rollback the last migration"
    cmds:
      - goose down

  db:down-to:
    desc: "Migrate the DB to a specific VERSION (use: task db:down-to -- migration_name)"
    cmds:
      - goose down-to {{.CLI_ARGS}}

  db:status:
    desc: "Show migration status"
    cmds:
      - goose status

  db:reset:
    desc: "Reset database (rollback all migrations)"
    prompt: "This will rollback all migrations. Are you sure?"
    cmds:
      - goose  reset

  db:redo:
    desc: "Rollback and re-apply the last migration"
    cmds:
      - goose  redo

  db:version:
    desc: "Show current migration version"
    cmds:
      - goose version

  db:fix:
    desc: "Fix sequential numbering of migration files"
    cmds:
      - goose fix

  db:validate:
    desc: "Check migration files without running them"
    cmds:
      - goose validate

  # =====================================
  # SQLC tasks
  # =====================================

  sqlc:
    desc: "Generate Go code from SQL"
    dir: "{{.BACKEND_DIR}}"
    silent: true
    cmds:
      - sqlc generate
      - echo "sqlc generate completed."

  # =====================================
  # Backend tasks
  # =====================================

  go:tidy:
    desc: "Tidy Go modules"
    dir: "{{.BACKEND_DIR}}"
    cmds:
      - go mod tidy

  go:build:
    desc: "Build Go binary"
    dir: "{{.BACKEND_DIR}}"
    cmds:
      - go build -o ./tmp/main ./cmd/api/main.go
    sources:
      - "**/*.go"
      - go.mod
      - go.sum
    generates:
      - "{{.BUILD_DIR}}/{{.BINARY_NAME}}"

  go:
    desc: "Run backend with hot reload (Air)"
    dir: "{{.BACKEND_DIR}}"
    cmds:
      - air

  go:run:
    desc: "Build and run backend"
    cmds:
      - task: backend:build

  bun:install:
    desc: "Install frontend dependencies (use -- <package> to install specific)"
    dir: "{{.FRONTEND_DIR}}"
    cmds:
      - |
        if [ "{{.CLI_ARGS}}" != "<no value>" ]; then
          bun add {{.CLI_ARGS}}
        else
          bun install
        fi

  bun:
    desc: "Run frontend development server"
    dir: "{{.FRONTEND_DIR}}"
    cmds:
      - bun --bun run dev

  bun:build:
    desc: "Build frontend for production"
    dir: "{{.FRONTEND_DIR}}"
    cmds:
      - bun --bun run build

  bun:preview:
    desc: "Preview production build"
    dir: "{{.FRONTEND_DIR}}"
    deps: [bun:build]
    cmds:
      - bun --bun run preview

  bun:lint:
    desc: "Lint frontend code with Biome"
    dir: "{{.FRONTEND_DIR}}"
    cmds:
      - bunx biome lint ./src

  bun:lint:fix:
    desc: "Lint and fix frontend code"
    dir: "{{.FRONTEND_DIR}}"
    cmds:
      - bunx biome lint --write ./src

  bun:format:
    desc: "Format frontend code with Biome"
    dir: "{{.FRONTEND_DIR}}"
    cmds:
      - bunx biome format --write ./src

  bun:format:check:
    desc: "Check frontend code formatting"
    dir: "{{.FRONTEND_DIR}}"
    cmds:
      - bunx biome format ./src

  bun:check:
    desc: "Run Biome check (lint + format)"
    dir: "{{.FRONTEND_DIR}}"
    cmds:
      - bunx biome check ./src

  bun:fix:
    desc: "Fix all issues (lint + format)"
    dir: "{{.FRONTEND_DIR}}"
    cmds:
      - bunx biome check --write ./src

  # =====================================
  # Build everything
  # =====================================

  build:
    desc: "Build both backend and frontend"
    cmds:
      - task: backend:build
      - task: frontend:build

  # =====================================
  # Testing
  # test:
  #   desc: "Run all tests"
  #   cmds:
  #     - task: _test:backend
  #     - task: _test:frontend

  # =====================================
  # Utilities
  # =====================================

  clean:
    desc: "Clean build artifacts"
    cmds:
      - rm -rf {{.BACKEND_DIR}}/{{.BUILD_DIR}}
      - rm -rf {{.BACKEND_DIR}}/tmp
      - rm -rf {{.FRONTEND_DIR}}/build
      - rm -rf {{.FRONTEND_DIR}}/dist
      - rm -rf {{.FRONTEND_DIR}}/.svelte-kit
      - task: go:tidy

  health:
    desc: "Check if backend is running"
    cmds:
      - curl -f http://localhost:{{.PORT}}/health || echo "Backend not running"
