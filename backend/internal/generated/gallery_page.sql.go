// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: gallery_page.sql

package generated

import (
	"context"

	"github.com/google/uuid"
)

const getPageGalleries = `-- name: GetPageGalleries :many
SELECT g.id, g.title, g.description, g.slug, g.is_published, g.published_at, g.created_at, g.updated_at
FROM galleries g
INNER JOIN gallery_page gp ON gp.gallery_id = g.id
WHERE gp.page_id = $1
ORDER BY gp.sort_order ASC
`

func (q *Queries) GetPageGalleries(ctx context.Context, pageID uuid.UUID) ([]Gallery, error) {
	rows, err := q.db.Query(ctx, getPageGalleries, pageID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Gallery
	for rows.Next() {
		var i Gallery
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Slug,
			&i.IsPublished,
			&i.PublishedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const linkGalleryToPage = `-- name: LinkGalleryToPage :exec
INSERT INTO gallery_page (gallery_id, page_id, sort_order)
VALUES ($1, $2, COALESCE(
  (SELECT MAX(sort_order) + 1 FROM gallery_page WHERE page_id = $2), 0
))
`

type LinkGalleryToPageParams struct {
	GalleryID uuid.UUID `db:"gallery_id" json:"gallery_id"`
	PageID    uuid.UUID `db:"page_id" json:"page_id"`
}

func (q *Queries) LinkGalleryToPage(ctx context.Context, arg LinkGalleryToPageParams) error {
	_, err := q.db.Exec(ctx, linkGalleryToPage, arg.GalleryID, arg.PageID)
	return err
}

const unlinkGalleryFromPage = `-- name: UnlinkGalleryFromPage :exec
DELETE FROM gallery_page
WHERE gallery_id = $1 AND page_id = $2
`

type UnlinkGalleryFromPageParams struct {
	GalleryID uuid.UUID `db:"gallery_id" json:"gallery_id"`
	PageID    uuid.UUID `db:"page_id" json:"page_id"`
}

func (q *Queries) UnlinkGalleryFromPage(ctx context.Context, arg UnlinkGalleryFromPageParams) error {
	_, err := q.db.Exec(ctx, unlinkGalleryFromPage, arg.GalleryID, arg.PageID)
	return err
}
