// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: blogs.sql

package generated

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createBlog = `-- name: CreateBlog :one
INSERT INTO blogs (
  slug, title, cover_image_id, seo_description, seo_title, canonical_url,
  is_draft, is_published, published_at
)
VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8, $9
)
RETURNING id, slug, title, cover_image_id, seo_description, seo_title, canonical_url, is_draft, is_published, published_at, created_at, updated_at
`

type CreateBlogParams struct {
	Slug           string             `db:"slug" json:"slug"`
	Title          string             `db:"title" json:"title"`
	CoverImageID   pgtype.UUID        `db:"cover_image_id" json:"cover_image_id"`
	SeoDescription *string            `db:"seo_description" json:"seo_description"`
	SeoTitle       *string            `db:"seo_title" json:"seo_title"`
	CanonicalUrl   *string            `db:"canonical_url" json:"canonical_url"`
	IsDraft        *bool              `db:"is_draft" json:"is_draft"`
	IsPublished    *bool              `db:"is_published" json:"is_published"`
	PublishedAt    pgtype.Timestamptz `db:"published_at" json:"published_at"`
}

func (q *Queries) CreateBlog(ctx context.Context, arg CreateBlogParams) (Blog, error) {
	row := q.db.QueryRow(ctx, createBlog,
		arg.Slug,
		arg.Title,
		arg.CoverImageID,
		arg.SeoDescription,
		arg.SeoTitle,
		arg.CanonicalUrl,
		arg.IsDraft,
		arg.IsPublished,
		arg.PublishedAt,
	)
	var i Blog
	err := row.Scan(
		&i.ID,
		&i.Slug,
		&i.Title,
		&i.CoverImageID,
		&i.SeoDescription,
		&i.SeoTitle,
		&i.CanonicalUrl,
		&i.IsDraft,
		&i.IsPublished,
		&i.PublishedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteBlog = `-- name: DeleteBlog :exec
DELETE FROM blogs
WHERE slug = $1
`

func (q *Queries) DeleteBlog(ctx context.Context, slug string) error {
	_, err := q.db.Exec(ctx, deleteBlog, slug)
	return err
}

const getBlogBySlug = `-- name: GetBlogBySlug :one
SELECT id, slug, title, cover_image_id, seo_description, seo_title, canonical_url, is_draft, is_published, published_at, created_at, updated_at FROM blogs
WHERE slug = $1
`

func (q *Queries) GetBlogBySlug(ctx context.Context, slug string) (Blog, error) {
	row := q.db.QueryRow(ctx, getBlogBySlug, slug)
	var i Blog
	err := row.Scan(
		&i.ID,
		&i.Slug,
		&i.Title,
		&i.CoverImageID,
		&i.SeoDescription,
		&i.SeoTitle,
		&i.CanonicalUrl,
		&i.IsDraft,
		&i.IsPublished,
		&i.PublishedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listBlogs = `-- name: ListBlogs :many
SELECT id, slug, title, cover_image_id, seo_description, seo_title, canonical_url, is_draft, is_published, published_at, created_at, updated_at FROM blogs
ORDER BY created_at DESC
`

func (q *Queries) ListBlogs(ctx context.Context) ([]Blog, error) {
	rows, err := q.db.Query(ctx, listBlogs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Blog
	for rows.Next() {
		var i Blog
		if err := rows.Scan(
			&i.ID,
			&i.Slug,
			&i.Title,
			&i.CoverImageID,
			&i.SeoDescription,
			&i.SeoTitle,
			&i.CanonicalUrl,
			&i.IsDraft,
			&i.IsPublished,
			&i.PublishedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBlog = `-- name: UpdateBlog :one
UPDATE blogs
SET
  title = $2,
  cover_image_id = $3,
  seo_description = $4,
  seo_title = $5,
  canonical_url = $6,
  is_draft = $7,
  is_published = $8,
  published_at = $9,
  updated_at = now()
WHERE slug = $1
RETURNING id, slug, title, cover_image_id, seo_description, seo_title, canonical_url, is_draft, is_published, published_at, created_at, updated_at
`

type UpdateBlogParams struct {
	Slug           string             `db:"slug" json:"slug"`
	Title          string             `db:"title" json:"title"`
	CoverImageID   pgtype.UUID        `db:"cover_image_id" json:"cover_image_id"`
	SeoDescription *string            `db:"seo_description" json:"seo_description"`
	SeoTitle       *string            `db:"seo_title" json:"seo_title"`
	CanonicalUrl   *string            `db:"canonical_url" json:"canonical_url"`
	IsDraft        *bool              `db:"is_draft" json:"is_draft"`
	IsPublished    *bool              `db:"is_published" json:"is_published"`
	PublishedAt    pgtype.Timestamptz `db:"published_at" json:"published_at"`
}

func (q *Queries) UpdateBlog(ctx context.Context, arg UpdateBlogParams) (Blog, error) {
	row := q.db.QueryRow(ctx, updateBlog,
		arg.Slug,
		arg.Title,
		arg.CoverImageID,
		arg.SeoDescription,
		arg.SeoTitle,
		arg.CanonicalUrl,
		arg.IsDraft,
		arg.IsPublished,
		arg.PublishedAt,
	)
	var i Blog
	err := row.Scan(
		&i.ID,
		&i.Slug,
		&i.Title,
		&i.CoverImageID,
		&i.SeoDescription,
		&i.SeoTitle,
		&i.CanonicalUrl,
		&i.IsDraft,
		&i.IsPublished,
		&i.PublishedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
