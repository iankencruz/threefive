// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: projects.sql

package generated

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createProject = `-- name: CreateProject :one
INSERT INTO projects (
    title, slug, description, meta_description, canonical_url, cover_media_id, is_published, published_at
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8
)
RETURNING id, title, slug, description, meta_description, canonical_url, cover_media_id, is_published, published_at, created_at, updated_at
`

type CreateProjectParams struct {
	Title           string           `db:"title" json:"title"`
	Slug            string           `db:"slug" json:"slug"`
	Description     *string          `db:"description" json:"description"`
	MetaDescription *string          `db:"meta_description" json:"meta_description"`
	CanonicalUrl    *string          `db:"canonical_url" json:"canonical_url"`
	CoverMediaID    pgtype.UUID      `db:"cover_media_id" json:"cover_media_id"`
	IsPublished     bool             `db:"is_published" json:"is_published"`
	PublishedAt     pgtype.Timestamp `db:"published_at" json:"published_at"`
}

func (q *Queries) CreateProject(ctx context.Context, arg CreateProjectParams) (Project, error) {
	row := q.db.QueryRow(ctx, createProject,
		arg.Title,
		arg.Slug,
		arg.Description,
		arg.MetaDescription,
		arg.CanonicalUrl,
		arg.CoverMediaID,
		arg.IsPublished,
		arg.PublishedAt,
	)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Slug,
		&i.Description,
		&i.MetaDescription,
		&i.CanonicalUrl,
		&i.CoverMediaID,
		&i.IsPublished,
		&i.PublishedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteProject = `-- name: DeleteProject :exec
DELETE FROM projects WHERE id = $1
`

func (q *Queries) DeleteProject(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteProject, id)
	return err
}

const getProjectByID = `-- name: GetProjectByID :one
SELECT id, title, slug, description, meta_description, canonical_url, cover_media_id, is_published, published_at, created_at, updated_at FROM projects WHERE id = $1
`

func (q *Queries) GetProjectByID(ctx context.Context, id uuid.UUID) (Project, error) {
	row := q.db.QueryRow(ctx, getProjectByID, id)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Slug,
		&i.Description,
		&i.MetaDescription,
		&i.CanonicalUrl,
		&i.CoverMediaID,
		&i.IsPublished,
		&i.PublishedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getProjectBySlug = `-- name: GetProjectBySlug :one
SELECT id, title, slug, description, meta_description, canonical_url, cover_media_id, is_published, published_at, created_at, updated_at FROM projects WHERE slug = $1
`

func (q *Queries) GetProjectBySlug(ctx context.Context, slug string) (Project, error) {
	row := q.db.QueryRow(ctx, getProjectBySlug, slug)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Slug,
		&i.Description,
		&i.MetaDescription,
		&i.CanonicalUrl,
		&i.CoverMediaID,
		&i.IsPublished,
		&i.PublishedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listProjects = `-- name: ListProjects :many
SELECT id, title, slug, description, meta_description, canonical_url, cover_media_id, is_published, published_at, created_at, updated_at FROM projects ORDER BY created_at DESC
`

func (q *Queries) ListProjects(ctx context.Context) ([]Project, error) {
	rows, err := q.db.Query(ctx, listProjects)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Project
	for rows.Next() {
		var i Project
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Slug,
			&i.Description,
			&i.MetaDescription,
			&i.CanonicalUrl,
			&i.CoverMediaID,
			&i.IsPublished,
			&i.PublishedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPublishedProjects = `-- name: ListPublishedProjects :many
SELECT id, title, slug, description, meta_description, canonical_url, cover_media_id, is_published, published_at, created_at, updated_at FROM projects
WHERE is_published = true
ORDER BY created_at DESC
`

func (q *Queries) ListPublishedProjects(ctx context.Context) ([]Project, error) {
	rows, err := q.db.Query(ctx, listPublishedProjects)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Project
	for rows.Next() {
		var i Project
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Slug,
			&i.Description,
			&i.MetaDescription,
			&i.CanonicalUrl,
			&i.CoverMediaID,
			&i.IsPublished,
			&i.PublishedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProject = `-- name: UpdateProject :one
UPDATE projects
SET
    title = $1,
    slug = $2,
    description = $3,
    meta_description = $4,
    canonical_url = $5,
    cover_media_id = $6,
    is_published = $7,
    published_at = $8,
    updated_at = $9
WHERE id = $10
RETURNING id, title, slug, description, meta_description, canonical_url, cover_media_id, is_published, published_at, created_at, updated_at
`

type UpdateProjectParams struct {
	Title           string             `db:"title" json:"title"`
	Slug            string             `db:"slug" json:"slug"`
	Description     *string            `db:"description" json:"description"`
	MetaDescription *string            `db:"meta_description" json:"meta_description"`
	CanonicalUrl    *string            `db:"canonical_url" json:"canonical_url"`
	CoverMediaID    pgtype.UUID        `db:"cover_media_id" json:"cover_media_id"`
	IsPublished     bool               `db:"is_published" json:"is_published"`
	PublishedAt     pgtype.Timestamp   `db:"published_at" json:"published_at"`
	UpdatedAt       pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
	ID              uuid.UUID          `db:"id" json:"id"`
}

func (q *Queries) UpdateProject(ctx context.Context, arg UpdateProjectParams) (Project, error) {
	row := q.db.QueryRow(ctx, updateProject,
		arg.Title,
		arg.Slug,
		arg.Description,
		arg.MetaDescription,
		arg.CanonicalUrl,
		arg.CoverMediaID,
		arg.IsPublished,
		arg.PublishedAt,
		arg.UpdatedAt,
		arg.ID,
	)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Slug,
		&i.Description,
		&i.MetaDescription,
		&i.CanonicalUrl,
		&i.CoverMediaID,
		&i.IsPublished,
		&i.PublishedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
