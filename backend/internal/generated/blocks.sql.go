// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: blocks.sql

package generated

import (
	"context"

	"github.com/google/uuid"
)

const createBlock = `-- name: CreateBlock :one
INSERT INTO blocks (id, parent_type, parent_id, type, sort_order)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, parent_type, parent_id, type, sort_order, created_at, updated_at
`

type CreateBlockParams struct {
	ID         uuid.UUID `db:"id" json:"id"`
	ParentType string    `db:"parent_type" json:"parent_type"`
	ParentID   uuid.UUID `db:"parent_id" json:"parent_id"`
	Type       string    `db:"type" json:"type"`
	SortOrder  int32     `db:"sort_order" json:"sort_order"`
}

func (q *Queries) CreateBlock(ctx context.Context, arg CreateBlockParams) (Block, error) {
	row := q.db.QueryRow(ctx, createBlock,
		arg.ID,
		arg.ParentType,
		arg.ParentID,
		arg.Type,
		arg.SortOrder,
	)
	var i Block
	err := row.Scan(
		&i.ID,
		&i.ParentType,
		&i.ParentID,
		&i.Type,
		&i.SortOrder,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteBlock = `-- name: DeleteBlock :exec
DELETE FROM blocks
WHERE id = $1
`

func (q *Queries) DeleteBlock(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteBlock, id)
	return err
}

const deleteBlocksByParent = `-- name: DeleteBlocksByParent :exec
DELETE FROM blocks
WHERE parent_type = $1 AND parent_id = $2
`

type DeleteBlocksByParentParams struct {
	ParentType string    `db:"parent_type" json:"parent_type"`
	ParentID   uuid.UUID `db:"parent_id" json:"parent_id"`
}

func (q *Queries) DeleteBlocksByParent(ctx context.Context, arg DeleteBlocksByParentParams) error {
	_, err := q.db.Exec(ctx, deleteBlocksByParent, arg.ParentType, arg.ParentID)
	return err
}

const getBlockByID = `-- name: GetBlockByID :one
SELECT id, parent_type, parent_id, type, sort_order, created_at, updated_at FROM blocks WHERE id = $1
`

func (q *Queries) GetBlockByID(ctx context.Context, id uuid.UUID) (Block, error) {
	row := q.db.QueryRow(ctx, getBlockByID, id)
	var i Block
	err := row.Scan(
		&i.ID,
		&i.ParentType,
		&i.ParentID,
		&i.Type,
		&i.SortOrder,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getBlocksForBlog = `-- name: GetBlocksForBlog :many
SELECT id, parent_type, parent_id, type, sort_order, created_at, updated_at FROM blocks
WHERE parent_type = 'blog' AND parent_id = $1
ORDER BY sort_order
`

func (q *Queries) GetBlocksForBlog(ctx context.Context, blogID uuid.UUID) ([]Block, error) {
	rows, err := q.db.Query(ctx, getBlocksForBlog, blogID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Block
	for rows.Next() {
		var i Block
		if err := rows.Scan(
			&i.ID,
			&i.ParentType,
			&i.ParentID,
			&i.Type,
			&i.SortOrder,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBlocksForPage = `-- name: GetBlocksForPage :many
SELECT id, parent_type, parent_id, type, sort_order, created_at, updated_at FROM blocks
WHERE parent_type = 'page' AND parent_id = $1
ORDER BY sort_order
`

func (q *Queries) GetBlocksForPage(ctx context.Context, pageID uuid.UUID) ([]Block, error) {
	rows, err := q.db.Query(ctx, getBlocksForPage, pageID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Block
	for rows.Next() {
		var i Block
		if err := rows.Scan(
			&i.ID,
			&i.ParentType,
			&i.ParentID,
			&i.Type,
			&i.SortOrder,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBlock = `-- name: UpdateBlock :exec
UPDATE blocks
SET
  parent_type = $1,
  parent_id   = $2,
  type        = $3,
  sort_order  = $4,
  updated_at  = now()
WHERE id = $5
`

type UpdateBlockParams struct {
	ParentType string    `db:"parent_type" json:"parent_type"`
	ParentID   uuid.UUID `db:"parent_id" json:"parent_id"`
	Type       string    `db:"type" json:"type"`
	SortOrder  int32     `db:"sort_order" json:"sort_order"`
	ID         uuid.UUID `db:"id" json:"id"`
}

func (q *Queries) UpdateBlock(ctx context.Context, arg UpdateBlockParams) error {
	_, err := q.db.Exec(ctx, updateBlock,
		arg.ParentType,
		arg.ParentID,
		arg.Type,
		arg.SortOrder,
		arg.ID,
	)
	return err
}

const updateBlockSortOrder = `-- name: UpdateBlockSortOrder :exec




UPDATE blocks
SET sort_order = $2,
    updated_at = now()
WHERE id = $1
`

type UpdateBlockSortOrderParams struct {
	ID        uuid.UUID `db:"id" json:"id"`
	SortOrder int32     `db:"sort_order" json:"sort_order"`
}

// -- name: UpdateBlockSortOrder :exec
// UPDATE blocks
// SET sort_order = @sort_order,
//
//	updated_at = NOW()
//
// WHERE id = @id;
func (q *Queries) UpdateBlockSortOrder(ctx context.Context, arg UpdateBlockSortOrderParams) error {
	_, err := q.db.Exec(ctx, updateBlockSortOrder, arg.ID, arg.SortOrder)
	return err
}
