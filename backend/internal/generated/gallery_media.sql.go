// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: gallery_media.sql

package generated

import (
	"context"

	"github.com/google/uuid"
)

const addMediaToGallery = `-- name: AddMediaToGallery :exec
INSERT INTO gallery_media (gallery_id, media_id, sort_order)
VALUES ($1, $2, $3)
`

type AddMediaToGalleryParams struct {
	GalleryID uuid.UUID `db:"gallery_id" json:"gallery_id"`
	MediaID   uuid.UUID `db:"media_id" json:"media_id"`
	SortOrder int32     `db:"sort_order" json:"sort_order"`
}

func (q *Queries) AddMediaToGallery(ctx context.Context, arg AddMediaToGalleryParams) error {
	_, err := q.db.Exec(ctx, addMediaToGallery, arg.GalleryID, arg.MediaID, arg.SortOrder)
	return err
}

const listMediaForGallery = `-- name: ListMediaForGallery :many
SELECT m.id, m.url, m.thumbnail_url, m.type, m.is_public, m.title, m.alt_text, m.mime_type, m.file_size, m.sort_order, m.created_at, m.updated_at, m.medium_url
FROM gallery_media gm
JOIN media m ON m.id = gm.media_id
WHERE gm.gallery_id = $1
ORDER BY gm.sort_order ASC
`

func (q *Queries) ListMediaForGallery(ctx context.Context, galleryID uuid.UUID) ([]Media, error) {
	rows, err := q.db.Query(ctx, listMediaForGallery, galleryID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Media
	for rows.Next() {
		var i Media
		if err := rows.Scan(
			&i.ID,
			&i.Url,
			&i.ThumbnailUrl,
			&i.Type,
			&i.IsPublic,
			&i.Title,
			&i.AltText,
			&i.MimeType,
			&i.FileSize,
			&i.SortOrder,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.MediumUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeMediaFromGallery = `-- name: RemoveMediaFromGallery :exec
DELETE FROM gallery_media WHERE gallery_id = $1 AND media_id = $2
`

type RemoveMediaFromGalleryParams struct {
	GalleryID uuid.UUID `db:"gallery_id" json:"gallery_id"`
	MediaID   uuid.UUID `db:"media_id" json:"media_id"`
}

func (q *Queries) RemoveMediaFromGallery(ctx context.Context, arg RemoveMediaFromGalleryParams) error {
	_, err := q.db.Exec(ctx, removeMediaFromGallery, arg.GalleryID, arg.MediaID)
	return err
}

const updateGalleryMediaSortOrder = `-- name: UpdateGalleryMediaSortOrder :exec
WITH sorted(media_id, sort_order) AS (
  SELECT unnest($2::uuid[]), generate_series(0, cardinality($2) - 1)
)
UPDATE gallery_media gm
SET sort_order = sorted.sort_order
FROM sorted
WHERE gm.gallery_id = $1
  AND gm.media_id = sorted.media_id
`

type UpdateGalleryMediaSortOrderParams struct {
	GalleryID uuid.UUID   `db:"gallery_id" json:"gallery_id"`
	MediaIds  []uuid.UUID `db:"media_ids" json:"media_ids"`
}

func (q *Queries) UpdateGalleryMediaSortOrder(ctx context.Context, arg UpdateGalleryMediaSortOrderParams) error {
	_, err := q.db.Exec(ctx, updateGalleryMediaSortOrder, arg.GalleryID, arg.MediaIds)
	return err
}
