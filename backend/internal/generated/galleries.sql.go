// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: galleries.sql

package generated

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createGallery = `-- name: CreateGallery :one
INSERT INTO galleries (
  title, slug, description, is_published, created_at, updated_at
) VALUES (
  $1, $2, $3, $4, $5, $6
)
  RETURNING id, title, description, slug, is_published, published_at, created_at, updated_at
`

type CreateGalleryParams struct {
	Title       string             `db:"title" json:"title"`
	Slug        string             `db:"slug" json:"slug"`
	Description *string            `db:"description" json:"description"`
	IsPublished bool               `db:"is_published" json:"is_published"`
	CreatedAt   pgtype.Timestamptz `db:"created_at" json:"created_at"`
	PublishedAt pgtype.Timestamptz `db:"published_at" json:"published_at"`
}

func (q *Queries) CreateGallery(ctx context.Context, arg CreateGalleryParams) (Gallery, error) {
	row := q.db.QueryRow(ctx, createGallery,
		arg.Title,
		arg.Slug,
		arg.Description,
		arg.IsPublished,
		arg.CreatedAt,
		arg.PublishedAt,
	)
	var i Gallery
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Slug,
		&i.IsPublished,
		&i.PublishedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteGallery = `-- name: DeleteGallery :exec
DELETE FROM galleries WHERE id = $1
`

func (q *Queries) DeleteGallery(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteGallery, id)
	return err
}

const getGalleryByID = `-- name: GetGalleryByID :one
SELECT id, title, description, slug, is_published, published_at, created_at, updated_at FROM galleries WHERE id = $1
`

func (q *Queries) GetGalleryByID(ctx context.Context, id uuid.UUID) (Gallery, error) {
	row := q.db.QueryRow(ctx, getGalleryByID, id)
	var i Gallery
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Slug,
		&i.IsPublished,
		&i.PublishedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getGalleryBySlug = `-- name: GetGalleryBySlug :one
SELECT id, title, description, slug, is_published, published_at, created_at, updated_at FROM galleries WHERE slug = $1
`

func (q *Queries) GetGalleryBySlug(ctx context.Context, slug string) (Gallery, error) {
	row := q.db.QueryRow(ctx, getGalleryBySlug, slug)
	var i Gallery
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Slug,
		&i.IsPublished,
		&i.PublishedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listGalleries = `-- name: ListGalleries :many
SELECT id, title, description, slug, is_published, published_at, created_at, updated_at FROM galleries ORDER BY created_at DESC
`

func (q *Queries) ListGalleries(ctx context.Context) ([]Gallery, error) {
	rows, err := q.db.Query(ctx, listGalleries)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Gallery
	for rows.Next() {
		var i Gallery
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Slug,
			&i.IsPublished,
			&i.PublishedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateGallery = `-- name: UpdateGallery :one
UPDATE galleries
SET 
    title = $1,
    slug = $2,
    description = $3,
    is_published = $4,
    published_at = $5,
    created_at = $6,
    updated_at = $7 
WHERE id = $8
RETURNING id, title, description, slug, is_published, published_at, created_at, updated_at
`

type UpdateGalleryParams struct {
	Title       string             `db:"title" json:"title"`
	Slug        string             `db:"slug" json:"slug"`
	Description *string            `db:"description" json:"description"`
	IsPublished bool               `db:"is_published" json:"is_published"`
	PublishedAt pgtype.Timestamptz `db:"published_at" json:"published_at"`
	CreatedAt   pgtype.Timestamptz `db:"created_at" json:"created_at"`
	UpdatedAt   pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
	ID          uuid.UUID          `db:"id" json:"id"`
}

func (q *Queries) UpdateGallery(ctx context.Context, arg UpdateGalleryParams) (Gallery, error) {
	row := q.db.QueryRow(ctx, updateGallery,
		arg.Title,
		arg.Slug,
		arg.Description,
		arg.IsPublished,
		arg.PublishedAt,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.ID,
	)
	var i Gallery
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Slug,
		&i.IsPublished,
		&i.PublishedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateGalleryBySlug = `-- name: UpdateGalleryBySlug :one
UPDATE galleries
SET 
    title = $1,
    slug = $2,
    description = $3,
    is_published = $4,
    published_at = $5,
    created_at = $6,
    updated_at = $7 
WHERE slug = $8
RETURNING id, title, description, slug, is_published, published_at, created_at, updated_at
`

type UpdateGalleryBySlugParams struct {
	Title       string             `db:"title" json:"title"`
	Slug        string             `db:"slug" json:"slug"`
	Description *string            `db:"description" json:"description"`
	IsPublished bool               `db:"is_published" json:"is_published"`
	PublishedAt pgtype.Timestamptz `db:"published_at" json:"published_at"`
	CreatedAt   pgtype.Timestamptz `db:"created_at" json:"created_at"`
	UpdatedAt   pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
	ID          string             `db:"id" json:"id"`
}

func (q *Queries) UpdateGalleryBySlug(ctx context.Context, arg UpdateGalleryBySlugParams) (Gallery, error) {
	row := q.db.QueryRow(ctx, updateGalleryBySlug,
		arg.Title,
		arg.Slug,
		arg.Description,
		arg.IsPublished,
		arg.PublishedAt,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.ID,
	)
	var i Gallery
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Slug,
		&i.IsPublished,
		&i.PublishedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
