// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: pages.sql

package generated

import (
	"context"

	"github.com/google/uuid"
	blocks "github.com/iankencruz/threefive/internal/core/blocks"
	"github.com/jackc/pgx/v5/pgtype"
)

const createPage = `-- name: CreatePage :one
INSERT INTO pages (
  slug, title, cover_image_id, seo_title, seo_description, seo_canonical,
  content, is_draft, is_published
)
VALUES (
  $1, $2, $3, $4, $5, $6,
  $7, $8, $9
)
RETURNING id, slug, title, cover_image_id, seo_title, seo_description, seo_canonical, content, is_draft, is_published, created_at, updated_at
`

type CreatePageParams struct {
	Slug           string         `db:"slug" json:"slug"`
	Title          string         `db:"title" json:"title"`
	CoverImageID   pgtype.UUID    `db:"cover_image_id" json:"cover_image_id"`
	SeoTitle       *string        `db:"seo_title" json:"seo_title"`
	SeoDescription *string        `db:"seo_description" json:"seo_description"`
	SeoCanonical   *string        `db:"seo_canonical" json:"seo_canonical"`
	Content        []blocks.Block `db:"content" json:"content"`
	IsDraft        *bool          `db:"is_draft" json:"is_draft"`
	IsPublished    *bool          `db:"is_published" json:"is_published"`
}

func (q *Queries) CreatePage(ctx context.Context, arg CreatePageParams) (Page, error) {
	row := q.db.QueryRow(ctx, createPage,
		arg.Slug,
		arg.Title,
		arg.CoverImageID,
		arg.SeoTitle,
		arg.SeoDescription,
		arg.SeoCanonical,
		arg.Content,
		arg.IsDraft,
		arg.IsPublished,
	)
	var i Page
	err := row.Scan(
		&i.ID,
		&i.Slug,
		&i.Title,
		&i.CoverImageID,
		&i.SeoTitle,
		&i.SeoDescription,
		&i.SeoCanonical,
		&i.Content,
		&i.IsDraft,
		&i.IsPublished,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deletePage = `-- name: DeletePage :exec
DELETE FROM pages WHERE id = $1
`

func (q *Queries) DeletePage(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deletePage, id)
	return err
}

const getPageByID = `-- name: GetPageByID :one
SELECT id, slug, title, cover_image_id, seo_title, seo_description, seo_canonical, content, is_draft, is_published, created_at, updated_at FROM pages WHERE id = $1
`

func (q *Queries) GetPageByID(ctx context.Context, id uuid.UUID) (Page, error) {
	row := q.db.QueryRow(ctx, getPageByID, id)
	var i Page
	err := row.Scan(
		&i.ID,
		&i.Slug,
		&i.Title,
		&i.CoverImageID,
		&i.SeoTitle,
		&i.SeoDescription,
		&i.SeoCanonical,
		&i.Content,
		&i.IsDraft,
		&i.IsPublished,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPageBySlug = `-- name: GetPageBySlug :one
SELECT id, slug, title, cover_image_id, seo_title, seo_description, seo_canonical, content, is_draft, is_published, created_at, updated_at FROM pages WHERE slug = $1
`

func (q *Queries) GetPageBySlug(ctx context.Context, slug string) (Page, error) {
	row := q.db.QueryRow(ctx, getPageBySlug, slug)
	var i Page
	err := row.Scan(
		&i.ID,
		&i.Slug,
		&i.Title,
		&i.CoverImageID,
		&i.SeoTitle,
		&i.SeoDescription,
		&i.SeoCanonical,
		&i.Content,
		&i.IsDraft,
		&i.IsPublished,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPublishedPageBySlug = `-- name: GetPublishedPageBySlug :one
SELECT id, slug, title, cover_image_id, seo_title, seo_description, seo_canonical, content, is_draft, is_published, created_at, updated_at FROM pages WHERE slug = $1 AND is_published = true
`

func (q *Queries) GetPublishedPageBySlug(ctx context.Context, slug string) (Page, error) {
	row := q.db.QueryRow(ctx, getPublishedPageBySlug, slug)
	var i Page
	err := row.Scan(
		&i.ID,
		&i.Slug,
		&i.Title,
		&i.CoverImageID,
		&i.SeoTitle,
		&i.SeoDescription,
		&i.SeoCanonical,
		&i.Content,
		&i.IsDraft,
		&i.IsPublished,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listPages = `-- name: ListPages :many
SELECT id, slug, title, cover_image_id, seo_title, seo_description, seo_canonical, content, is_draft, is_published, created_at, updated_at FROM pages ORDER BY updated_at DESC
`

func (q *Queries) ListPages(ctx context.Context) ([]Page, error) {
	rows, err := q.db.Query(ctx, listPages)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Page
	for rows.Next() {
		var i Page
		if err := rows.Scan(
			&i.ID,
			&i.Slug,
			&i.Title,
			&i.CoverImageID,
			&i.SeoTitle,
			&i.SeoDescription,
			&i.SeoCanonical,
			&i.Content,
			&i.IsDraft,
			&i.IsPublished,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePage = `-- name: UpdatePage :one
UPDATE pages
SET title = $1,
    slug = $2,
    cover_image_id = $3,
    seo_title = $4,
    seo_description = $5,
    seo_canonical = $6,
    content = $7,
    is_draft = $8,
    is_published = $9,
    updated_at = now()
WHERE id = $10
RETURNING id, slug, title, cover_image_id, seo_title, seo_description, seo_canonical, content, is_draft, is_published, created_at, updated_at
`

type UpdatePageParams struct {
	Title          string         `db:"title" json:"title"`
	Slug           string         `db:"slug" json:"slug"`
	CoverImageID   pgtype.UUID    `db:"cover_image_id" json:"cover_image_id"`
	SeoTitle       *string        `db:"seo_title" json:"seo_title"`
	SeoDescription *string        `db:"seo_description" json:"seo_description"`
	SeoCanonical   *string        `db:"seo_canonical" json:"seo_canonical"`
	Content        []blocks.Block `db:"content" json:"content"`
	IsDraft        *bool          `db:"is_draft" json:"is_draft"`
	IsPublished    *bool          `db:"is_published" json:"is_published"`
	ID             uuid.UUID      `db:"id" json:"id"`
}

func (q *Queries) UpdatePage(ctx context.Context, arg UpdatePageParams) (Page, error) {
	row := q.db.QueryRow(ctx, updatePage,
		arg.Title,
		arg.Slug,
		arg.CoverImageID,
		arg.SeoTitle,
		arg.SeoDescription,
		arg.SeoCanonical,
		arg.Content,
		arg.IsDraft,
		arg.IsPublished,
		arg.ID,
	)
	var i Page
	err := row.Scan(
		&i.ID,
		&i.Slug,
		&i.Title,
		&i.CoverImageID,
		&i.SeoTitle,
		&i.SeoDescription,
		&i.SeoCanonical,
		&i.Content,
		&i.IsDraft,
		&i.IsPublished,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
