// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: blocks_hero.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createHeroBlock = `-- name: CreateHeroBlock :one

INSERT INTO block_hero (
    block_id, 
    title, 
    subtitle, 
    image_id, 
    cta_text, 
    cta_url
)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, block_id, title, subtitle, image_id, cta_text, cta_url
`

type CreateHeroBlockParams struct {
	BlockID  uuid.UUID   `json:"block_id"`
	Title    string      `json:"title"`
	Subtitle pgtype.Text `json:"subtitle"`
	ImageID  pgtype.UUID `json:"image_id"`
	CtaText  pgtype.Text `json:"cta_text"`
	CtaUrl   pgtype.Text `json:"cta_url"`
}

// ============================================
// Hero Block Queries
// ============================================
func (q *Queries) CreateHeroBlock(ctx context.Context, arg CreateHeroBlockParams) (BlockHero, error) {
	row := q.db.QueryRow(ctx, createHeroBlock,
		arg.BlockID,
		arg.Title,
		arg.Subtitle,
		arg.ImageID,
		arg.CtaText,
		arg.CtaUrl,
	)
	var i BlockHero
	err := row.Scan(
		&i.ID,
		&i.BlockID,
		&i.Title,
		&i.Subtitle,
		&i.ImageID,
		&i.CtaText,
		&i.CtaUrl,
	)
	return i, err
}

const deleteHeroBlock = `-- name: DeleteHeroBlock :exec
DELETE FROM block_hero WHERE block_id = $1
`

func (q *Queries) DeleteHeroBlock(ctx context.Context, blockID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteHeroBlock, blockID)
	return err
}

const getHeroBlockByBlockID = `-- name: GetHeroBlockByBlockID :one
SELECT id, block_id, title, subtitle, image_id, cta_text, cta_url FROM block_hero
WHERE block_id = $1
`

func (q *Queries) GetHeroBlockByBlockID(ctx context.Context, blockID uuid.UUID) (BlockHero, error) {
	row := q.db.QueryRow(ctx, getHeroBlockByBlockID, blockID)
	var i BlockHero
	err := row.Scan(
		&i.ID,
		&i.BlockID,
		&i.Title,
		&i.Subtitle,
		&i.ImageID,
		&i.CtaText,
		&i.CtaUrl,
	)
	return i, err
}

const getHeroBlocksByPageID = `-- name: GetHeroBlocksByPageID :many
SELECT bh.id, bh.block_id, bh.title, bh.subtitle, bh.image_id, bh.cta_text, bh.cta_url
FROM block_hero bh
INNER JOIN blocks b ON b.id = bh.block_id
WHERE b.page_id = $1
ORDER BY b.sort_order
`

func (q *Queries) GetHeroBlocksByPageID(ctx context.Context, pageID uuid.UUID) ([]BlockHero, error) {
	rows, err := q.db.Query(ctx, getHeroBlocksByPageID, pageID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BlockHero
	for rows.Next() {
		var i BlockHero
		if err := rows.Scan(
			&i.ID,
			&i.BlockID,
			&i.Title,
			&i.Subtitle,
			&i.ImageID,
			&i.CtaText,
			&i.CtaUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateHeroBlock = `-- name: UpdateHeroBlock :one
UPDATE block_hero
SET 
    title = COALESCE($1, title),
    subtitle = $2,
    image_id = $3,
    cta_text = $4,
    cta_url = $5
WHERE block_id = $6
RETURNING id, block_id, title, subtitle, image_id, cta_text, cta_url
`

type UpdateHeroBlockParams struct {
	Title    string      `json:"title"`
	Subtitle pgtype.Text `json:"subtitle"`
	ImageID  pgtype.UUID `json:"image_id"`
	CtaText  pgtype.Text `json:"cta_text"`
	CtaUrl   pgtype.Text `json:"cta_url"`
	BlockID  uuid.UUID   `json:"block_id"`
}

func (q *Queries) UpdateHeroBlock(ctx context.Context, arg UpdateHeroBlockParams) (BlockHero, error) {
	row := q.db.QueryRow(ctx, updateHeroBlock,
		arg.Title,
		arg.Subtitle,
		arg.ImageID,
		arg.CtaText,
		arg.CtaUrl,
		arg.BlockID,
	)
	var i BlockHero
	err := row.Scan(
		&i.ID,
		&i.BlockID,
		&i.Title,
		&i.Subtitle,
		&i.ImageID,
		&i.CtaText,
		&i.CtaUrl,
	)
	return i, err
}
