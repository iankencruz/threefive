// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: blocks_gallery.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createGalleryBlock = `-- name: CreateGalleryBlock :one


INSERT INTO block_gallery (
    block_id, 
    title
)
VALUES ($1, $2)
RETURNING id, block_id, title
`

type CreateGalleryBlockParams struct {
	BlockID uuid.UUID   `json:"block_id"`
	Title   pgtype.Text `json:"title"`
}

// backend/sql/queries/blocks_gallery.sql
// ============================================
// Gallery Block Queries
// ============================================
func (q *Queries) CreateGalleryBlock(ctx context.Context, arg CreateGalleryBlockParams) (BlockGallery, error) {
	row := q.db.QueryRow(ctx, createGalleryBlock, arg.BlockID, arg.Title)
	var i BlockGallery
	err := row.Scan(&i.ID, &i.BlockID, &i.Title)
	return i, err
}

const deleteGalleryBlock = `-- name: DeleteGalleryBlock :exec
DELETE FROM block_gallery WHERE block_id = $1
`

func (q *Queries) DeleteGalleryBlock(ctx context.Context, blockID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteGalleryBlock, blockID)
	return err
}

const getGalleryBlockByBlockID = `-- name: GetGalleryBlockByBlockID :one
SELECT id, block_id, title FROM block_gallery
WHERE block_id = $1
`

func (q *Queries) GetGalleryBlockByBlockID(ctx context.Context, blockID uuid.UUID) (BlockGallery, error) {
	row := q.db.QueryRow(ctx, getGalleryBlockByBlockID, blockID)
	var i BlockGallery
	err := row.Scan(&i.ID, &i.BlockID, &i.Title)
	return i, err
}

const getGalleryBlocksByPageID = `-- name: GetGalleryBlocksByPageID :many
SELECT bg.id, bg.block_id, bg.title
FROM block_gallery bg
INNER JOIN blocks b ON b.id = bg.block_id
WHERE b.page_id = $1
ORDER BY b.sort_order
`

func (q *Queries) GetGalleryBlocksByPageID(ctx context.Context, pageID uuid.UUID) ([]BlockGallery, error) {
	rows, err := q.db.Query(ctx, getGalleryBlocksByPageID, pageID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BlockGallery
	for rows.Next() {
		var i BlockGallery
		if err := rows.Scan(&i.ID, &i.BlockID, &i.Title); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateGalleryBlock = `-- name: UpdateGalleryBlock :one
UPDATE block_gallery
SET title = $1
WHERE block_id = $2
RETURNING id, block_id, title
`

type UpdateGalleryBlockParams struct {
	Title   pgtype.Text `json:"title"`
	BlockID uuid.UUID   `json:"block_id"`
}

func (q *Queries) UpdateGalleryBlock(ctx context.Context, arg UpdateGalleryBlockParams) (BlockGallery, error) {
	row := q.db.QueryRow(ctx, updateGalleryBlock, arg.Title, arg.BlockID)
	var i BlockGallery
	err := row.Scan(&i.ID, &i.BlockID, &i.Title)
	return i, err
}
