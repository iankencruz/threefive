// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: media.sql

package sqlc

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createMedia = `-- name: CreateMedia :one

INSERT INTO media (
    filename, 
    original_filename, 
    mime_type, 
    size_bytes, 
    width, 
    height,
    storage_type, 
    storage_path, 
    s3_bucket, 
    s3_key, 
    s3_region,
    url,
    thumbnail_url,
    uploaded_by
)
VALUES (
    $1, 
    $2, 
    $3, 
    $4, 
    $5, 
    $6,
    $7, 
    $8,
    $9, 
    $10, 
    $11,
    $12,
    $13,
    $14
)
RETURNING id, filename, original_filename, mime_type, size_bytes, width, height, storage_type, storage_path, s3_bucket, s3_key, s3_region, url, thumbnail_url, uploaded_by, created_at, updated_at, deleted_at
`

type CreateMediaParams struct {
	Filename         string      `json:"filename"`
	OriginalFilename string      `json:"original_filename"`
	MimeType         string      `json:"mime_type"`
	SizeBytes        int64       `json:"size_bytes"`
	Width            pgtype.Int4 `json:"width"`
	Height           pgtype.Int4 `json:"height"`
	StorageType      StorageType `json:"storage_type"`
	StoragePath      string      `json:"storage_path"`
	S3Bucket         pgtype.Text `json:"s3_bucket"`
	S3Key            pgtype.Text `json:"s3_key"`
	S3Region         pgtype.Text `json:"s3_region"`
	Url              pgtype.Text `json:"url"`
	ThumbnailUrl     pgtype.Text `json:"thumbnail_url"`
	UploadedBy       uuid.UUID   `json:"uploaded_by"`
}

// backend/sql/queries/media.sql
func (q *Queries) CreateMedia(ctx context.Context, arg CreateMediaParams) (Media, error) {
	row := q.db.QueryRow(ctx, createMedia,
		arg.Filename,
		arg.OriginalFilename,
		arg.MimeType,
		arg.SizeBytes,
		arg.Width,
		arg.Height,
		arg.StorageType,
		arg.StoragePath,
		arg.S3Bucket,
		arg.S3Key,
		arg.S3Region,
		arg.Url,
		arg.ThumbnailUrl,
		arg.UploadedBy,
	)
	var i Media
	err := row.Scan(
		&i.ID,
		&i.Filename,
		&i.OriginalFilename,
		&i.MimeType,
		&i.SizeBytes,
		&i.Width,
		&i.Height,
		&i.StorageType,
		&i.StoragePath,
		&i.S3Bucket,
		&i.S3Key,
		&i.S3Region,
		&i.Url,
		&i.ThumbnailUrl,
		&i.UploadedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getEntitiesForMedia = `-- name: GetEntitiesForMedia :many
SELECT entity_type, entity_id, sort_order, created_at
FROM media_relations
WHERE media_id = $1
ORDER BY created_at DESC
`

type GetEntitiesForMediaRow struct {
	EntityType string      `json:"entity_type"`
	EntityID   uuid.UUID   `json:"entity_id"`
	SortOrder  pgtype.Int4 `json:"sort_order"`
	CreatedAt  time.Time   `json:"created_at"`
}

func (q *Queries) GetEntitiesForMedia(ctx context.Context, mediaID uuid.UUID) ([]GetEntitiesForMediaRow, error) {
	rows, err := q.db.Query(ctx, getEntitiesForMedia, mediaID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetEntitiesForMediaRow
	for rows.Next() {
		var i GetEntitiesForMediaRow
		if err := rows.Scan(
			&i.EntityType,
			&i.EntityID,
			&i.SortOrder,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMediaByID = `-- name: GetMediaByID :one
SELECT id, filename, original_filename, mime_type, size_bytes, width, height, storage_type, storage_path, s3_bucket, s3_key, s3_region, url, thumbnail_url, uploaded_by, created_at, updated_at, deleted_at FROM media
WHERE id = $1 AND deleted_at IS NULL
`

func (q *Queries) GetMediaByID(ctx context.Context, id uuid.UUID) (Media, error) {
	row := q.db.QueryRow(ctx, getMediaByID, id)
	var i Media
	err := row.Scan(
		&i.ID,
		&i.Filename,
		&i.OriginalFilename,
		&i.MimeType,
		&i.SizeBytes,
		&i.Width,
		&i.Height,
		&i.StorageType,
		&i.StoragePath,
		&i.S3Bucket,
		&i.S3Key,
		&i.S3Region,
		&i.Url,
		&i.ThumbnailUrl,
		&i.UploadedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getMediaForEntity = `-- name: GetMediaForEntity :many
SELECT m.id, m.filename, m.original_filename, m.mime_type, m.size_bytes, m.width, m.height, m.storage_type, m.storage_path, m.s3_bucket, m.s3_key, m.s3_region, m.url, m.thumbnail_url, m.uploaded_by, m.created_at, m.updated_at, m.deleted_at
FROM media m
INNER JOIN media_relations mr ON m.id = mr.media_id
WHERE mr.entity_type = $1 
  AND mr.entity_id = $2
  AND m.deleted_at IS NULL
ORDER BY mr.sort_order, mr.created_at
`

type GetMediaForEntityParams struct {
	EntityType string    `json:"entity_type"`
	EntityID   uuid.UUID `json:"entity_id"`
}

func (q *Queries) GetMediaForEntity(ctx context.Context, arg GetMediaForEntityParams) ([]Media, error) {
	rows, err := q.db.Query(ctx, getMediaForEntity, arg.EntityType, arg.EntityID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Media
	for rows.Next() {
		var i Media
		if err := rows.Scan(
			&i.ID,
			&i.Filename,
			&i.OriginalFilename,
			&i.MimeType,
			&i.SizeBytes,
			&i.Width,
			&i.Height,
			&i.StorageType,
			&i.StoragePath,
			&i.S3Bucket,
			&i.S3Key,
			&i.S3Region,
			&i.Url,
			&i.ThumbnailUrl,
			&i.UploadedBy,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMediaStats = `-- name: GetMediaStats :one
SELECT 
    COUNT(*) as total_files,
    SUM(size_bytes) as total_size_bytes,
    COUNT(DISTINCT uploaded_by) as unique_uploaders
FROM media
WHERE deleted_at IS NULL
`

type GetMediaStatsRow struct {
	TotalFiles      int64 `json:"total_files"`
	TotalSizeBytes  int64 `json:"total_size_bytes"`
	UniqueUploaders int64 `json:"unique_uploaders"`
}

func (q *Queries) GetMediaStats(ctx context.Context) (GetMediaStatsRow, error) {
	row := q.db.QueryRow(ctx, getMediaStats)
	var i GetMediaStatsRow
	err := row.Scan(&i.TotalFiles, &i.TotalSizeBytes, &i.UniqueUploaders)
	return i, err
}

const hardDeleteMedia = `-- name: HardDeleteMedia :exec
DELETE FROM media WHERE id = $1
`

func (q *Queries) HardDeleteMedia(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, hardDeleteMedia, id)
	return err
}

const linkMediaToEntity = `-- name: LinkMediaToEntity :one

INSERT INTO media_relations (media_id, entity_type, entity_id, sort_order)
VALUES ($1, $2, $3, $4)
ON CONFLICT (media_id, entity_type, entity_id) 
DO UPDATE SET sort_order = $4
RETURNING id, media_id, entity_type, entity_id, sort_order, created_at
`

type LinkMediaToEntityParams struct {
	MediaID    uuid.UUID   `json:"media_id"`
	EntityType string      `json:"entity_type"`
	EntityID   uuid.UUID   `json:"entity_id"`
	SortOrder  pgtype.Int4 `json:"sort_order"`
}

// Media Relations Queries
func (q *Queries) LinkMediaToEntity(ctx context.Context, arg LinkMediaToEntityParams) (MediaRelations, error) {
	row := q.db.QueryRow(ctx, linkMediaToEntity,
		arg.MediaID,
		arg.EntityType,
		arg.EntityID,
		arg.SortOrder,
	)
	var i MediaRelations
	err := row.Scan(
		&i.ID,
		&i.MediaID,
		&i.EntityType,
		&i.EntityID,
		&i.SortOrder,
		&i.CreatedAt,
	)
	return i, err
}

const listMedia = `-- name: ListMedia :many
SELECT id, filename, original_filename, mime_type, size_bytes, width, height, storage_type, storage_path, s3_bucket, s3_key, s3_region, url, thumbnail_url, uploaded_by, created_at, updated_at, deleted_at FROM media
WHERE deleted_at IS NULL
ORDER BY created_at DESC
LIMIT $2 OFFSET $1
`

type ListMediaParams struct {
	OffsetVal int32 `json:"offset_val"`
	LimitVal  int32 `json:"limit_val"`
}

func (q *Queries) ListMedia(ctx context.Context, arg ListMediaParams) ([]Media, error) {
	rows, err := q.db.Query(ctx, listMedia, arg.OffsetVal, arg.LimitVal)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Media
	for rows.Next() {
		var i Media
		if err := rows.Scan(
			&i.ID,
			&i.Filename,
			&i.OriginalFilename,
			&i.MimeType,
			&i.SizeBytes,
			&i.Width,
			&i.Height,
			&i.StorageType,
			&i.StoragePath,
			&i.S3Bucket,
			&i.S3Key,
			&i.S3Region,
			&i.Url,
			&i.ThumbnailUrl,
			&i.UploadedBy,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listMediaByUser = `-- name: ListMediaByUser :many
SELECT id, filename, original_filename, mime_type, size_bytes, width, height, storage_type, storage_path, s3_bucket, s3_key, s3_region, url, thumbnail_url, uploaded_by, created_at, updated_at, deleted_at FROM media
WHERE uploaded_by = $1 AND deleted_at IS NULL
ORDER BY created_at DESC
`

func (q *Queries) ListMediaByUser(ctx context.Context, uploadedBy uuid.UUID) ([]Media, error) {
	rows, err := q.db.Query(ctx, listMediaByUser, uploadedBy)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Media
	for rows.Next() {
		var i Media
		if err := rows.Scan(
			&i.ID,
			&i.Filename,
			&i.OriginalFilename,
			&i.MimeType,
			&i.SizeBytes,
			&i.Width,
			&i.Height,
			&i.StorageType,
			&i.StoragePath,
			&i.S3Bucket,
			&i.S3Key,
			&i.S3Region,
			&i.Url,
			&i.ThumbnailUrl,
			&i.UploadedBy,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const softDeleteMedia = `-- name: SoftDeleteMedia :exec
UPDATE media
SET deleted_at = NOW(), updated_at = NOW()
WHERE id = $1
`

func (q *Queries) SoftDeleteMedia(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, softDeleteMedia, id)
	return err
}

const unlinkMediaFromEntity = `-- name: UnlinkMediaFromEntity :exec
DELETE FROM media_relations
WHERE media_id = $1 
  AND entity_type = $2 
  AND entity_id = $3
`

type UnlinkMediaFromEntityParams struct {
	MediaID    uuid.UUID `json:"media_id"`
	EntityType string    `json:"entity_type"`
	EntityID   uuid.UUID `json:"entity_id"`
}

func (q *Queries) UnlinkMediaFromEntity(ctx context.Context, arg UnlinkMediaFromEntityParams) error {
	_, err := q.db.Exec(ctx, unlinkMediaFromEntity, arg.MediaID, arg.EntityType, arg.EntityID)
	return err
}
