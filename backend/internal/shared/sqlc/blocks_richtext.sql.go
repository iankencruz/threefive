// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: blocks_richtext.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
)

const createRichtextBlock = `-- name: CreateRichtextBlock :one

INSERT INTO block_richtext (block_id, content)
VALUES ($1, $2)
RETURNING id, block_id, content
`

type CreateRichtextBlockParams struct {
	BlockID uuid.UUID `json:"block_id"`
	Content string    `json:"content"`
}

// ============================================
// Richtext Block Queries
// ============================================
func (q *Queries) CreateRichtextBlock(ctx context.Context, arg CreateRichtextBlockParams) (BlockRichtext, error) {
	row := q.db.QueryRow(ctx, createRichtextBlock, arg.BlockID, arg.Content)
	var i BlockRichtext
	err := row.Scan(&i.ID, &i.BlockID, &i.Content)
	return i, err
}

const deleteRichtextBlock = `-- name: DeleteRichtextBlock :exec
DELETE FROM block_richtext WHERE block_id = $1
`

func (q *Queries) DeleteRichtextBlock(ctx context.Context, blockID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteRichtextBlock, blockID)
	return err
}

const getRichtextBlockByBlockID = `-- name: GetRichtextBlockByBlockID :one
SELECT id, block_id, content FROM block_richtext
WHERE block_id = $1
`

func (q *Queries) GetRichtextBlockByBlockID(ctx context.Context, blockID uuid.UUID) (BlockRichtext, error) {
	row := q.db.QueryRow(ctx, getRichtextBlockByBlockID, blockID)
	var i BlockRichtext
	err := row.Scan(&i.ID, &i.BlockID, &i.Content)
	return i, err
}

const getRichtextBlocksByPageID = `-- name: GetRichtextBlocksByPageID :many
SELECT br.id, br.block_id, br.content
FROM block_richtext br
INNER JOIN blocks b ON b.id = br.block_id
WHERE b.page_id = $1
ORDER BY b.sort_order
`

func (q *Queries) GetRichtextBlocksByPageID(ctx context.Context, pageID uuid.UUID) ([]BlockRichtext, error) {
	rows, err := q.db.Query(ctx, getRichtextBlocksByPageID, pageID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BlockRichtext
	for rows.Next() {
		var i BlockRichtext
		if err := rows.Scan(&i.ID, &i.BlockID, &i.Content); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRichtextBlock = `-- name: UpdateRichtextBlock :one
UPDATE block_richtext
SET content = $1
WHERE block_id = $2
RETURNING id, block_id, content
`

type UpdateRichtextBlockParams struct {
	Content string    `json:"content"`
	BlockID uuid.UUID `json:"block_id"`
}

func (q *Queries) UpdateRichtextBlock(ctx context.Context, arg UpdateRichtextBlockParams) (BlockRichtext, error) {
	row := q.db.QueryRow(ctx, updateRichtextBlock, arg.Content, arg.BlockID)
	var i BlockRichtext
	err := row.Scan(&i.ID, &i.BlockID, &i.Content)
	return i, err
}
