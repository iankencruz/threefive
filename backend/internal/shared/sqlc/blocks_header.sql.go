// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: blocks_header.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createHeaderBlock = `-- name: CreateHeaderBlock :one

INSERT INTO block_header (
    block_id, 
    heading, 
    subheading, 
    level
)
VALUES ($1, $2, $3, $4)
RETURNING id, block_id, heading, subheading, level
`

type CreateHeaderBlockParams struct {
	BlockID    uuid.UUID   `json:"block_id"`
	Heading    string      `json:"heading"`
	Subheading pgtype.Text `json:"subheading"`
	Level      pgtype.Text `json:"level"`
}

// ============================================
// Header Block Queries
// ============================================
func (q *Queries) CreateHeaderBlock(ctx context.Context, arg CreateHeaderBlockParams) (BlockHeader, error) {
	row := q.db.QueryRow(ctx, createHeaderBlock,
		arg.BlockID,
		arg.Heading,
		arg.Subheading,
		arg.Level,
	)
	var i BlockHeader
	err := row.Scan(
		&i.ID,
		&i.BlockID,
		&i.Heading,
		&i.Subheading,
		&i.Level,
	)
	return i, err
}

const deleteHeaderBlock = `-- name: DeleteHeaderBlock :exec
DELETE FROM block_header WHERE block_id = $1
`

func (q *Queries) DeleteHeaderBlock(ctx context.Context, blockID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteHeaderBlock, blockID)
	return err
}

const getHeaderBlockByBlockID = `-- name: GetHeaderBlockByBlockID :one
SELECT id, block_id, heading, subheading, level FROM block_header
WHERE block_id = $1
`

func (q *Queries) GetHeaderBlockByBlockID(ctx context.Context, blockID uuid.UUID) (BlockHeader, error) {
	row := q.db.QueryRow(ctx, getHeaderBlockByBlockID, blockID)
	var i BlockHeader
	err := row.Scan(
		&i.ID,
		&i.BlockID,
		&i.Heading,
		&i.Subheading,
		&i.Level,
	)
	return i, err
}

const getHeaderBlocksByPageID = `-- name: GetHeaderBlocksByPageID :many
SELECT bh.id, bh.block_id, bh.heading, bh.subheading, bh.level
FROM block_header bh
INNER JOIN blocks b ON b.id = bh.block_id
WHERE b.page_id = $1
ORDER BY b.sort_order
`

func (q *Queries) GetHeaderBlocksByPageID(ctx context.Context, pageID uuid.UUID) ([]BlockHeader, error) {
	rows, err := q.db.Query(ctx, getHeaderBlocksByPageID, pageID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BlockHeader
	for rows.Next() {
		var i BlockHeader
		if err := rows.Scan(
			&i.ID,
			&i.BlockID,
			&i.Heading,
			&i.Subheading,
			&i.Level,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateHeaderBlock = `-- name: UpdateHeaderBlock :one
UPDATE block_header
SET 
    heading = COALESCE($1, heading),
    subheading = $2,
    level = COALESCE($3, level)
WHERE block_id = $4
RETURNING id, block_id, heading, subheading, level
`

type UpdateHeaderBlockParams struct {
	Heading    string      `json:"heading"`
	Subheading pgtype.Text `json:"subheading"`
	Level      pgtype.Text `json:"level"`
	BlockID    uuid.UUID   `json:"block_id"`
}

func (q *Queries) UpdateHeaderBlock(ctx context.Context, arg UpdateHeaderBlockParams) (BlockHeader, error) {
	row := q.db.QueryRow(ctx, updateHeaderBlock,
		arg.Heading,
		arg.Subheading,
		arg.Level,
		arg.BlockID,
	)
	var i BlockHeader
	err := row.Scan(
		&i.ID,
		&i.BlockID,
		&i.Heading,
		&i.Subheading,
		&i.Level,
	)
	return i, err
}
