// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: gallery.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createGallery = `-- name: CreateGallery :one
INSERT INTO galleries (title, description, created_at, updated_at)
VALUES ($1, $2, NOW(), NOW())
RETURNING id, title, description, created_at, updated_at
`

type CreateGalleryParams struct {
	Title       string      `json:"title"`
	Description pgtype.Text `json:"description"`
}

func (q *Queries) CreateGallery(ctx context.Context, arg CreateGalleryParams) (Galleries, error) {
	row := q.db.QueryRow(ctx, createGallery, arg.Title, arg.Description)
	var i Galleries
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteGallery = `-- name: DeleteGallery :exec
DELETE FROM galleries
WHERE id = $1
`

func (q *Queries) DeleteGallery(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteGallery, id)
	return err
}

const getGalleryByID = `-- name: GetGalleryByID :one
SELECT id, title, description, created_at, updated_at FROM galleries
WHERE id = $1
`

func (q *Queries) GetGalleryByID(ctx context.Context, id uuid.UUID) (Galleries, error) {
	row := q.db.QueryRow(ctx, getGalleryByID, id)
	var i Galleries
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getGalleryMediaCount = `-- name: GetGalleryMediaCount :one
SELECT COUNT(*) as count
FROM media_relations
WHERE entity_type = 'gallery' AND entity_id = $1
`

func (q *Queries) GetGalleryMediaCount(ctx context.Context, entityID uuid.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, getGalleryMediaCount, entityID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const listGalleries = `-- name: ListGalleries :many
SELECT id, title, description, created_at, updated_at FROM galleries
ORDER BY created_at DESC
LIMIT $2 OFFSET $1
`

type ListGalleriesParams struct {
	OffsetVal int32 `json:"offset_val"`
	LimitVal  int32 `json:"limit_val"`
}

func (q *Queries) ListGalleries(ctx context.Context, arg ListGalleriesParams) ([]Galleries, error) {
	rows, err := q.db.Query(ctx, listGalleries, arg.OffsetVal, arg.LimitVal)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Galleries
	for rows.Next() {
		var i Galleries
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateGallery = `-- name: UpdateGallery :one
UPDATE galleries
SET 
    title = $1,
    description = $2,
    updated_at = NOW()
WHERE id = $3
RETURNING id, title, description, created_at, updated_at
`

type UpdateGalleryParams struct {
	Title       string      `json:"title"`
	Description pgtype.Text `json:"description"`
	ID          uuid.UUID   `json:"id"`
}

func (q *Queries) UpdateGallery(ctx context.Context, arg UpdateGalleryParams) (Galleries, error) {
	row := q.db.QueryRow(ctx, updateGallery, arg.Title, arg.Description, arg.ID)
	var i Galleries
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
