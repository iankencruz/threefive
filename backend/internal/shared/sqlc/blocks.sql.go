// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: blocks.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
)

const createBlock = `-- name: CreateBlock :one


INSERT INTO blocks (page_id, type, sort_order)
VALUES ($1, $2, $3)
RETURNING id, page_id, type, sort_order, created_at, updated_at
`

type CreateBlockParams struct {
	PageID    uuid.UUID `json:"page_id"`
	Type      string    `json:"type"`
	SortOrder int32     `json:"sort_order"`
}

// backend/sql/queries/blocks.sql
// ============================================
// Base Blocks Queries
// ============================================
func (q *Queries) CreateBlock(ctx context.Context, arg CreateBlockParams) (Blocks, error) {
	row := q.db.QueryRow(ctx, createBlock, arg.PageID, arg.Type, arg.SortOrder)
	var i Blocks
	err := row.Scan(
		&i.ID,
		&i.PageID,
		&i.Type,
		&i.SortOrder,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteBlock = `-- name: DeleteBlock :exec
DELETE FROM blocks WHERE id = $1
`

func (q *Queries) DeleteBlock(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteBlock, id)
	return err
}

const deleteBlocksByPageID = `-- name: DeleteBlocksByPageID :exec
DELETE FROM blocks WHERE page_id = $1
`

func (q *Queries) DeleteBlocksByPageID(ctx context.Context, pageID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteBlocksByPageID, pageID)
	return err
}

const getBlockByID = `-- name: GetBlockByID :one
SELECT id, page_id, type, sort_order, created_at, updated_at FROM blocks
WHERE id = $1
`

func (q *Queries) GetBlockByID(ctx context.Context, id uuid.UUID) (Blocks, error) {
	row := q.db.QueryRow(ctx, getBlockByID, id)
	var i Blocks
	err := row.Scan(
		&i.ID,
		&i.PageID,
		&i.Type,
		&i.SortOrder,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getBlocksByPageID = `-- name: GetBlocksByPageID :many
SELECT id, page_id, type, sort_order, created_at, updated_at FROM blocks
WHERE page_id = $1
ORDER BY sort_order
`

func (q *Queries) GetBlocksByPageID(ctx context.Context, pageID uuid.UUID) ([]Blocks, error) {
	rows, err := q.db.Query(ctx, getBlocksByPageID, pageID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Blocks
	for rows.Next() {
		var i Blocks
		if err := rows.Scan(
			&i.ID,
			&i.PageID,
			&i.Type,
			&i.SortOrder,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBlockOrder = `-- name: UpdateBlockOrder :exec
UPDATE blocks
SET sort_order = $1, updated_at = NOW()
WHERE id = $2
`

type UpdateBlockOrderParams struct {
	SortOrder int32     `json:"sort_order"`
	ID        uuid.UUID `json:"id"`
}

func (q *Queries) UpdateBlockOrder(ctx context.Context, arg UpdateBlockOrderParams) error {
	_, err := q.db.Exec(ctx, updateBlockOrder, arg.SortOrder, arg.ID)
	return err
}
