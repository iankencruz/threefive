// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: blocks.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createBlock = `-- name: CreateBlock :one


INSERT INTO blocks (page_id, type, sort_order)
VALUES ($1, $2, $3)
RETURNING id, page_id, type, sort_order, created_at, updated_at
`

type CreateBlockParams struct {
	PageID    uuid.UUID `json:"page_id"`
	Type      string    `json:"type"`
	SortOrder int32     `json:"sort_order"`
}

// backend/sql/queries/blocks.sql
// ============================================
// Base Blocks Queries
// ============================================
func (q *Queries) CreateBlock(ctx context.Context, arg CreateBlockParams) (Blocks, error) {
	row := q.db.QueryRow(ctx, createBlock, arg.PageID, arg.Type, arg.SortOrder)
	var i Blocks
	err := row.Scan(
		&i.ID,
		&i.PageID,
		&i.Type,
		&i.SortOrder,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createHeaderBlock = `-- name: CreateHeaderBlock :one

INSERT INTO block_header (
    block_id, 
    heading, 
    subheading, 
    level
)
VALUES ($1, $2, $3, $4)
RETURNING id, block_id, heading, subheading, level
`

type CreateHeaderBlockParams struct {
	BlockID    uuid.UUID   `json:"block_id"`
	Heading    string      `json:"heading"`
	Subheading pgtype.Text `json:"subheading"`
	Level      pgtype.Text `json:"level"`
}

// ============================================
// Header Block Queries
// ============================================
func (q *Queries) CreateHeaderBlock(ctx context.Context, arg CreateHeaderBlockParams) (BlockHeader, error) {
	row := q.db.QueryRow(ctx, createHeaderBlock,
		arg.BlockID,
		arg.Heading,
		arg.Subheading,
		arg.Level,
	)
	var i BlockHeader
	err := row.Scan(
		&i.ID,
		&i.BlockID,
		&i.Heading,
		&i.Subheading,
		&i.Level,
	)
	return i, err
}

const createHeroBlock = `-- name: CreateHeroBlock :one

INSERT INTO block_hero (
    block_id, 
    title, 
    subtitle, 
    image_id, 
    cta_text, 
    cta_url
)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, block_id, title, subtitle, image_id, cta_text, cta_url
`

type CreateHeroBlockParams struct {
	BlockID  uuid.UUID   `json:"block_id"`
	Title    string      `json:"title"`
	Subtitle pgtype.Text `json:"subtitle"`
	ImageID  pgtype.UUID `json:"image_id"`
	CtaText  pgtype.Text `json:"cta_text"`
	CtaUrl   pgtype.Text `json:"cta_url"`
}

// ============================================
// Hero Block Queries
// ============================================
func (q *Queries) CreateHeroBlock(ctx context.Context, arg CreateHeroBlockParams) (BlockHero, error) {
	row := q.db.QueryRow(ctx, createHeroBlock,
		arg.BlockID,
		arg.Title,
		arg.Subtitle,
		arg.ImageID,
		arg.CtaText,
		arg.CtaUrl,
	)
	var i BlockHero
	err := row.Scan(
		&i.ID,
		&i.BlockID,
		&i.Title,
		&i.Subtitle,
		&i.ImageID,
		&i.CtaText,
		&i.CtaUrl,
	)
	return i, err
}

const createRichtextBlock = `-- name: CreateRichtextBlock :one

INSERT INTO block_richtext (block_id, content)
VALUES ($1, $2)
RETURNING id, block_id, content
`

type CreateRichtextBlockParams struct {
	BlockID uuid.UUID `json:"block_id"`
	Content string    `json:"content"`
}

// ============================================
// Richtext Block Queries
// ============================================
func (q *Queries) CreateRichtextBlock(ctx context.Context, arg CreateRichtextBlockParams) (BlockRichtext, error) {
	row := q.db.QueryRow(ctx, createRichtextBlock, arg.BlockID, arg.Content)
	var i BlockRichtext
	err := row.Scan(&i.ID, &i.BlockID, &i.Content)
	return i, err
}

const deleteBlock = `-- name: DeleteBlock :exec
DELETE FROM blocks WHERE id = $1
`

func (q *Queries) DeleteBlock(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteBlock, id)
	return err
}

const deleteBlocksByPageID = `-- name: DeleteBlocksByPageID :exec
DELETE FROM blocks WHERE page_id = $1
`

func (q *Queries) DeleteBlocksByPageID(ctx context.Context, pageID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteBlocksByPageID, pageID)
	return err
}

const deleteHeaderBlock = `-- name: DeleteHeaderBlock :exec
DELETE FROM block_header WHERE block_id = $1
`

func (q *Queries) DeleteHeaderBlock(ctx context.Context, blockID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteHeaderBlock, blockID)
	return err
}

const deleteHeroBlock = `-- name: DeleteHeroBlock :exec
DELETE FROM block_hero WHERE block_id = $1
`

func (q *Queries) DeleteHeroBlock(ctx context.Context, blockID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteHeroBlock, blockID)
	return err
}

const deleteRichtextBlock = `-- name: DeleteRichtextBlock :exec
DELETE FROM block_richtext WHERE block_id = $1
`

func (q *Queries) DeleteRichtextBlock(ctx context.Context, blockID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteRichtextBlock, blockID)
	return err
}

const getBlockByID = `-- name: GetBlockByID :one
SELECT id, page_id, type, sort_order, created_at, updated_at FROM blocks
WHERE id = $1
`

func (q *Queries) GetBlockByID(ctx context.Context, id uuid.UUID) (Blocks, error) {
	row := q.db.QueryRow(ctx, getBlockByID, id)
	var i Blocks
	err := row.Scan(
		&i.ID,
		&i.PageID,
		&i.Type,
		&i.SortOrder,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getBlocksByPageID = `-- name: GetBlocksByPageID :many
SELECT id, page_id, type, sort_order, created_at, updated_at FROM blocks
WHERE page_id = $1
ORDER BY sort_order
`

func (q *Queries) GetBlocksByPageID(ctx context.Context, pageID uuid.UUID) ([]Blocks, error) {
	rows, err := q.db.Query(ctx, getBlocksByPageID, pageID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Blocks
	for rows.Next() {
		var i Blocks
		if err := rows.Scan(
			&i.ID,
			&i.PageID,
			&i.Type,
			&i.SortOrder,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getHeaderBlockByBlockID = `-- name: GetHeaderBlockByBlockID :one
SELECT id, block_id, heading, subheading, level FROM block_header
WHERE block_id = $1
`

func (q *Queries) GetHeaderBlockByBlockID(ctx context.Context, blockID uuid.UUID) (BlockHeader, error) {
	row := q.db.QueryRow(ctx, getHeaderBlockByBlockID, blockID)
	var i BlockHeader
	err := row.Scan(
		&i.ID,
		&i.BlockID,
		&i.Heading,
		&i.Subheading,
		&i.Level,
	)
	return i, err
}

const getHeaderBlocksByPageID = `-- name: GetHeaderBlocksByPageID :many
SELECT bh.id, bh.block_id, bh.heading, bh.subheading, bh.level
FROM block_header bh
INNER JOIN blocks b ON b.id = bh.block_id
WHERE b.page_id = $1
ORDER BY b.sort_order
`

func (q *Queries) GetHeaderBlocksByPageID(ctx context.Context, pageID uuid.UUID) ([]BlockHeader, error) {
	rows, err := q.db.Query(ctx, getHeaderBlocksByPageID, pageID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BlockHeader
	for rows.Next() {
		var i BlockHeader
		if err := rows.Scan(
			&i.ID,
			&i.BlockID,
			&i.Heading,
			&i.Subheading,
			&i.Level,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getHeroBlockByBlockID = `-- name: GetHeroBlockByBlockID :one
SELECT id, block_id, title, subtitle, image_id, cta_text, cta_url FROM block_hero
WHERE block_id = $1
`

func (q *Queries) GetHeroBlockByBlockID(ctx context.Context, blockID uuid.UUID) (BlockHero, error) {
	row := q.db.QueryRow(ctx, getHeroBlockByBlockID, blockID)
	var i BlockHero
	err := row.Scan(
		&i.ID,
		&i.BlockID,
		&i.Title,
		&i.Subtitle,
		&i.ImageID,
		&i.CtaText,
		&i.CtaUrl,
	)
	return i, err
}

const getHeroBlocksByPageID = `-- name: GetHeroBlocksByPageID :many
SELECT bh.id, bh.block_id, bh.title, bh.subtitle, bh.image_id, bh.cta_text, bh.cta_url
FROM block_hero bh
INNER JOIN blocks b ON b.id = bh.block_id
WHERE b.page_id = $1
ORDER BY b.sort_order
`

func (q *Queries) GetHeroBlocksByPageID(ctx context.Context, pageID uuid.UUID) ([]BlockHero, error) {
	rows, err := q.db.Query(ctx, getHeroBlocksByPageID, pageID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BlockHero
	for rows.Next() {
		var i BlockHero
		if err := rows.Scan(
			&i.ID,
			&i.BlockID,
			&i.Title,
			&i.Subtitle,
			&i.ImageID,
			&i.CtaText,
			&i.CtaUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRichtextBlockByBlockID = `-- name: GetRichtextBlockByBlockID :one
SELECT id, block_id, content FROM block_richtext
WHERE block_id = $1
`

func (q *Queries) GetRichtextBlockByBlockID(ctx context.Context, blockID uuid.UUID) (BlockRichtext, error) {
	row := q.db.QueryRow(ctx, getRichtextBlockByBlockID, blockID)
	var i BlockRichtext
	err := row.Scan(&i.ID, &i.BlockID, &i.Content)
	return i, err
}

const getRichtextBlocksByPageID = `-- name: GetRichtextBlocksByPageID :many
SELECT br.id, br.block_id, br.content
FROM block_richtext br
INNER JOIN blocks b ON b.id = br.block_id
WHERE b.page_id = $1
ORDER BY b.sort_order
`

func (q *Queries) GetRichtextBlocksByPageID(ctx context.Context, pageID uuid.UUID) ([]BlockRichtext, error) {
	rows, err := q.db.Query(ctx, getRichtextBlocksByPageID, pageID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BlockRichtext
	for rows.Next() {
		var i BlockRichtext
		if err := rows.Scan(&i.ID, &i.BlockID, &i.Content); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBlockOrder = `-- name: UpdateBlockOrder :exec
UPDATE blocks
SET sort_order = $1, updated_at = NOW()
WHERE id = $2
`

type UpdateBlockOrderParams struct {
	SortOrder int32     `json:"sort_order"`
	ID        uuid.UUID `json:"id"`
}

func (q *Queries) UpdateBlockOrder(ctx context.Context, arg UpdateBlockOrderParams) error {
	_, err := q.db.Exec(ctx, updateBlockOrder, arg.SortOrder, arg.ID)
	return err
}

const updateHeaderBlock = `-- name: UpdateHeaderBlock :one
UPDATE block_header
SET 
    heading = COALESCE($1, heading),
    subheading = $2,
    level = COALESCE($3, level)
WHERE block_id = $4
RETURNING id, block_id, heading, subheading, level
`

type UpdateHeaderBlockParams struct {
	Heading    string      `json:"heading"`
	Subheading pgtype.Text `json:"subheading"`
	Level      pgtype.Text `json:"level"`
	BlockID    uuid.UUID   `json:"block_id"`
}

func (q *Queries) UpdateHeaderBlock(ctx context.Context, arg UpdateHeaderBlockParams) (BlockHeader, error) {
	row := q.db.QueryRow(ctx, updateHeaderBlock,
		arg.Heading,
		arg.Subheading,
		arg.Level,
		arg.BlockID,
	)
	var i BlockHeader
	err := row.Scan(
		&i.ID,
		&i.BlockID,
		&i.Heading,
		&i.Subheading,
		&i.Level,
	)
	return i, err
}

const updateHeroBlock = `-- name: UpdateHeroBlock :one
UPDATE block_hero
SET 
    title = COALESCE($1, title),
    subtitle = $2,
    image_id = $3,
    cta_text = $4,
    cta_url = $5
WHERE block_id = $6
RETURNING id, block_id, title, subtitle, image_id, cta_text, cta_url
`

type UpdateHeroBlockParams struct {
	Title    string      `json:"title"`
	Subtitle pgtype.Text `json:"subtitle"`
	ImageID  pgtype.UUID `json:"image_id"`
	CtaText  pgtype.Text `json:"cta_text"`
	CtaUrl   pgtype.Text `json:"cta_url"`
	BlockID  uuid.UUID   `json:"block_id"`
}

func (q *Queries) UpdateHeroBlock(ctx context.Context, arg UpdateHeroBlockParams) (BlockHero, error) {
	row := q.db.QueryRow(ctx, updateHeroBlock,
		arg.Title,
		arg.Subtitle,
		arg.ImageID,
		arg.CtaText,
		arg.CtaUrl,
		arg.BlockID,
	)
	var i BlockHero
	err := row.Scan(
		&i.ID,
		&i.BlockID,
		&i.Title,
		&i.Subtitle,
		&i.ImageID,
		&i.CtaText,
		&i.CtaUrl,
	)
	return i, err
}

const updateRichtextBlock = `-- name: UpdateRichtextBlock :one
UPDATE block_richtext
SET content = $1
WHERE block_id = $2
RETURNING id, block_id, content
`

type UpdateRichtextBlockParams struct {
	Content string    `json:"content"`
	BlockID uuid.UUID `json:"block_id"`
}

func (q *Queries) UpdateRichtextBlock(ctx context.Context, arg UpdateRichtextBlockParams) (BlockRichtext, error) {
	row := q.db.QueryRow(ctx, updateRichtextBlock, arg.Content, arg.BlockID)
	var i BlockRichtext
	err := row.Scan(&i.ID, &i.BlockID, &i.Content)
	return i, err
}
