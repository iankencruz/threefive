// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: pages.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const checkSlugExists = `-- name: CheckSlugExists :one
SELECT EXISTS(
    SELECT 1 FROM pages 
    WHERE slug = $1 
      AND deleted_at IS NULL
      AND ($2::uuid IS NULL OR id != $2)
) AS exists
`

type CheckSlugExistsParams struct {
	Slug      string    `json:"slug"`
	ExcludeID uuid.UUID `json:"exclude_id"`
}

func (q *Queries) CheckSlugExists(ctx context.Context, arg CheckSlugExistsParams) (bool, error) {
	row := q.db.QueryRow(ctx, checkSlugExists, arg.Slug, arg.ExcludeID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const countPages = `-- name: CountPages :one
SELECT COUNT(*) FROM pages
WHERE deleted_at IS NULL
  AND ($1::page_status IS NULL OR status = $1)
  AND ($2::page_type IS NULL OR page_type = $2)
  AND ($3::uuid IS NULL OR author_id = $3)
`

type CountPagesParams struct {
	Status   NullPageStatus `json:"status"`
	PageType NullPageType   `json:"page_type"`
	AuthorID pgtype.UUID    `json:"author_id"`
}

func (q *Queries) CountPages(ctx context.Context, arg CountPagesParams) (int64, error) {
	row := q.db.QueryRow(ctx, countPages, arg.Status, arg.PageType, arg.AuthorID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createPage = `-- name: CreatePage :one

INSERT INTO pages (
    title, 
    slug, 
    page_type, 
    status,
    featured_image_id,
    author_id
)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, title, slug, page_type, status, featured_image_id, author_id, created_at, updated_at, published_at, deleted_at
`

type CreatePageParams struct {
	Title           string         `json:"title"`
	Slug            string         `json:"slug"`
	PageType        PageType       `json:"page_type"`
	Status          NullPageStatus `json:"status"`
	FeaturedImageID pgtype.UUID    `json:"featured_image_id"`
	AuthorID        uuid.UUID      `json:"author_id"`
}

// backend/sql/queries/pages.sql
func (q *Queries) CreatePage(ctx context.Context, arg CreatePageParams) (Pages, error) {
	row := q.db.QueryRow(ctx, createPage,
		arg.Title,
		arg.Slug,
		arg.PageType,
		arg.Status,
		arg.FeaturedImageID,
		arg.AuthorID,
	)
	var i Pages
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Slug,
		&i.PageType,
		&i.Status,
		&i.FeaturedImageID,
		&i.AuthorID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.PublishedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getPageByID = `-- name: GetPageByID :one
SELECT id, title, slug, page_type, status, featured_image_id, author_id, created_at, updated_at, published_at, deleted_at FROM pages
WHERE id = $1 AND deleted_at IS NULL
`

func (q *Queries) GetPageByID(ctx context.Context, id uuid.UUID) (Pages, error) {
	row := q.db.QueryRow(ctx, getPageByID, id)
	var i Pages
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Slug,
		&i.PageType,
		&i.Status,
		&i.FeaturedImageID,
		&i.AuthorID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.PublishedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getPageBySlug = `-- name: GetPageBySlug :one
SELECT id, title, slug, page_type, status, featured_image_id, author_id, created_at, updated_at, published_at, deleted_at FROM pages
WHERE slug = $1 
  AND status = 'published' 
  AND deleted_at IS NULL
`

func (q *Queries) GetPageBySlug(ctx context.Context, slug string) (Pages, error) {
	row := q.db.QueryRow(ctx, getPageBySlug, slug)
	var i Pages
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Slug,
		&i.PageType,
		&i.Status,
		&i.FeaturedImageID,
		&i.AuthorID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.PublishedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getPageBySlugAdmin = `-- name: GetPageBySlugAdmin :one
SELECT id, title, slug, page_type, status, featured_image_id, author_id, created_at, updated_at, published_at, deleted_at FROM pages
WHERE slug = $1 AND deleted_at IS NULL
`

func (q *Queries) GetPageBySlugAdmin(ctx context.Context, slug string) (Pages, error) {
	row := q.db.QueryRow(ctx, getPageBySlugAdmin, slug)
	var i Pages
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Slug,
		&i.PageType,
		&i.Status,
		&i.FeaturedImageID,
		&i.AuthorID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.PublishedAt,
		&i.DeletedAt,
	)
	return i, err
}

const hardDeletePage = `-- name: HardDeletePage :exec
DELETE FROM pages WHERE id = $1
`

func (q *Queries) HardDeletePage(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, hardDeletePage, id)
	return err
}

const listPages = `-- name: ListPages :many
SELECT id, title, slug, page_type, status, featured_image_id, author_id, created_at, updated_at, published_at, deleted_at FROM pages
WHERE deleted_at IS NULL
  AND ($1::page_status IS NULL OR status = $1)
  AND ($2::page_type IS NULL OR page_type = $2)
  AND ($3::uuid IS NULL OR author_id = $3)
ORDER BY 
  CASE WHEN $4::text = 'created_at_desc' THEN created_at END DESC,
  CASE WHEN $4::text = 'created_at_asc' THEN created_at END ASC,
  CASE WHEN $4::text = 'updated_at_desc' THEN updated_at END DESC,
  CASE WHEN $4::text = 'updated_at_asc' THEN updated_at END ASC,
  CASE WHEN $4::text = 'title_asc' THEN title END ASC,
  CASE WHEN $4::text = 'title_desc' THEN title END DESC,
  created_at DESC
LIMIT $6 OFFSET $5
`

type ListPagesParams struct {
	Status    NullPageStatus `json:"status"`
	PageType  NullPageType   `json:"page_type"`
	AuthorID  pgtype.UUID    `json:"author_id"`
	SortBy    string         `json:"sort_by"`
	OffsetVal int32          `json:"offset_val"`
	LimitVal  int32          `json:"limit_val"`
}

func (q *Queries) ListPages(ctx context.Context, arg ListPagesParams) ([]Pages, error) {
	rows, err := q.db.Query(ctx, listPages,
		arg.Status,
		arg.PageType,
		arg.AuthorID,
		arg.SortBy,
		arg.OffsetVal,
		arg.LimitVal,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Pages
	for rows.Next() {
		var i Pages
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Slug,
			&i.PageType,
			&i.Status,
			&i.FeaturedImageID,
			&i.AuthorID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.PublishedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPublishedPages = `-- name: ListPublishedPages :many
SELECT id, title, slug, page_type, status, featured_image_id, author_id, created_at, updated_at, published_at, deleted_at FROM pages
WHERE status = 'published' 
  AND deleted_at IS NULL
  AND ($1::page_type IS NULL OR page_type = $1)
ORDER BY published_at DESC
LIMIT $3 OFFSET $2
`

type ListPublishedPagesParams struct {
	PageType  NullPageType `json:"page_type"`
	OffsetVal int32        `json:"offset_val"`
	LimitVal  int32        `json:"limit_val"`
}

func (q *Queries) ListPublishedPages(ctx context.Context, arg ListPublishedPagesParams) ([]Pages, error) {
	rows, err := q.db.Query(ctx, listPublishedPages, arg.PageType, arg.OffsetVal, arg.LimitVal)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Pages
	for rows.Next() {
		var i Pages
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Slug,
			&i.PageType,
			&i.Status,
			&i.FeaturedImageID,
			&i.AuthorID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.PublishedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const softDeletePage = `-- name: SoftDeletePage :exec
UPDATE pages
SET deleted_at = NOW(), updated_at = NOW()
WHERE id = $1
`

func (q *Queries) SoftDeletePage(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, softDeletePage, id)
	return err
}

const updatePage = `-- name: UpdatePage :one
UPDATE pages
SET 
    title = COALESCE($1, title),
    slug = COALESCE($2, slug),
    featured_image_id = $3,
    updated_at = NOW()
WHERE id = $4 AND deleted_at IS NULL
RETURNING id, title, slug, page_type, status, featured_image_id, author_id, created_at, updated_at, published_at, deleted_at
`

type UpdatePageParams struct {
	Title           string      `json:"title"`
	Slug            string      `json:"slug"`
	FeaturedImageID pgtype.UUID `json:"featured_image_id"`
	ID              uuid.UUID   `json:"id"`
}

func (q *Queries) UpdatePage(ctx context.Context, arg UpdatePageParams) (Pages, error) {
	row := q.db.QueryRow(ctx, updatePage,
		arg.Title,
		arg.Slug,
		arg.FeaturedImageID,
		arg.ID,
	)
	var i Pages
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Slug,
		&i.PageType,
		&i.Status,
		&i.FeaturedImageID,
		&i.AuthorID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.PublishedAt,
		&i.DeletedAt,
	)
	return i, err
}

const updatePageStatus = `-- name: UpdatePageStatus :one
UPDATE pages
SET 
    status = $1,
    published_at = CASE 
        WHEN $1 = 'published' AND published_at IS NULL 
        THEN NOW() 
        ELSE published_at 
    END,
    updated_at = NOW()
WHERE id = $2 AND deleted_at IS NULL
RETURNING id, title, slug, page_type, status, featured_image_id, author_id, created_at, updated_at, published_at, deleted_at
`

type UpdatePageStatusParams struct {
	Status NullPageStatus `json:"status"`
	ID     uuid.UUID      `json:"id"`
}

func (q *Queries) UpdatePageStatus(ctx context.Context, arg UpdatePageStatusParams) (Pages, error) {
	row := q.db.QueryRow(ctx, updatePageStatus, arg.Status, arg.ID)
	var i Pages
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Slug,
		&i.PageType,
		&i.Status,
		&i.FeaturedImageID,
		&i.AuthorID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.PublishedAt,
		&i.DeletedAt,
	)
	return i, err
}
