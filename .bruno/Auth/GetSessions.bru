meta {
  name: Get Sessions
  type: http
  seq: 10
}

get {
  url: {{base-url}}/auth/sessions
  body: none
  auth: none
}

assert {
  res.status: eq 200
  res.body.sessions: isDefined
}

tests {
  test("should return 200 status", function() {
    expect(res.getStatus()).to.equal(200);
  });
  
  test("should return sessions array", function() {
    expect(res.getBody().sessions).to.be.an('array');
  });
  
  test("sessions should have required fields", function() {
    const sessions = res.getBody().sessions;
    if (sessions.length > 0) {
      const session = sessions[0];
      expect(session.id).to.exist;
      expect(session.created_at).to.exist;
      expect(session.expires_at).to.exist;
    }
  });
  
  test("should not expose session token", function() {
    const sessions = res.getBody().sessions;
    if (sessions.length > 0) {
      expect(sessions[0].token).to.be.undefined;
    }
  });
}

docs {
  # Get User Sessions
  
  Returns all active sessions for the current user.
  Useful for showing user where they're logged in and allowing them to revoke specific sessions.
}
