version: "3"

env:
  PROJECT_NAME: threefive
  BACKEND_DIR: backend
  STATIC_OUT_DIR: frontend/build
  FRONTEND_DIR: frontend

dotenv: [".env"]

tasks:
  default:
    desc: Show all available tasks
    cmds:
      - task --list

  tidy:
    desc: Install Go Dependencies
    dir: "{{ .BACKEND_DIR }}"
    cmds:
      - go mod tidy

  backend:
    desc: Run Dev Server
    dir: "{{.BACKEND_DIR}}"
    cmds:
      - air

  frontend:
    desc: Start SvelteKit dev server
    dir: "{{.FRONTEND_DIR}}"
    cmds:
      - bun run dev

  build:
    desc: Build Go binary only
    dir: "{{.BACKEND_DIR}}"
    cmds:
      - go build -o ./tmp/main ./cmd/api

  build-front:
    desc: Build SvelteKit for production
    dir: "{{.FRONTEND_DIR}}"
    cmds:
      - bun run build

  bun-i:
    desc: Bun Install Dependencies
    dir: "{{.FRONTEND_DIR}}"
    cmds:
      - bun install {{.CLI_ARGS}}

  bun-x:
    desc: Bun Remove Dependencies
    dir: "{{.FRONTEND_DIR}}"
    cmds:
      - bun remove {{.CLI_ARGS}}

  clean:
    desc: Remove Go binary
    dir: ./backend/
    cmds:
      - rm -rf tmp/

    # üß© Templ
  templ:
    desc: Compile .templ files into Go code
    cmds:
      - templ generate

  # üé® TailwindCSS
  tailwind:
    desc: Generate CSS from Tailwind input file
    cmds:
      - npx tailwindcss -i ./backend/ui/static/css/input.css -o ./backend/ui/static/css/tailwind.css --minify

  # üê§ Goose migrations
  db-create:
    desc: Create a new goose migration
    cmds:
      - goose -dir ./backend/db/migrations/ create {{.CLI_ARGS}} sql

  db-up:
    desc: Apply all up migrations
    dir: ./backend
    cmds:
      - goose up

  db-down:
    desc: Roll back the last migration
    dir: ./backend
    cmds:
      - goose down

  db-reset:
    desc: Roll back everything
    dir: ./backend
    cmds:
      - goose reset

  db-status:
    desc: Show current migration status
    dir: ./backend
    cmds:
      - goose status

  # üß¨ SQLC code generation
  sqlc:
    desc: Generate Go code from SQL files
    dir: "{{.BACKEND_DIR}}"
    cmds:
      - sqlc generate

  docker-up:
    desc: Start QL container
    cmds:
      - docker-compose up -d

  docker-down:
    desc: Stop all Docker containers
    cmds:
      - docker-compose down

  docker-logs:
    desc: View database logs
    cmds:
      - docker-compose logs -f

  docker-psql:
    desc: Open psql shell to the DB container
    cmds:
      - docker exec -it  psql -U user -d sabiflow

  test:
    desc: Run tests (supports optional param e.g. task test -- auth or auth:integration)
    cmds:
      - task: test:{{.CLI_ARGS | default "all"}}

  test:all:
    desc: Run all tests in backend
    cmds:
      - go test -v ./backend/...

  test:auth:
    desc: Run unit tests in internal/auth
    cmds:
      - go test -v ./backend/internal/auth

  test:auth:integration:
    desc: Run TestContainers integration tests in internal/auth
    cmds:
      - go test -v -tags=integration ./backend/internal/auth

  test:auth:single:
    desc: Run specific test in internal/auth (use TEST=TestName)
    vars:
      TEST: TestCreateUser
    cmds:
      - go test -v -tags=integration ./backend/internal/auth -run '{{.TEST}}'
