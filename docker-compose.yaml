# docker-compose.yml
version: '3.8'

services:
  # Your existing PostgreSQL service
  postgres:
    image: docker.io/library/postgres:16-alpine
    container_name: threefive-postgres
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: pass
      POSTGRES_DB: threefive
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d threefive"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MinIO - S3 Compatible Storage
  minio:
    image: docker.io/minio/minio:latest
    container_name: threefive-minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    ports:
      - "9000:9000"  # S3 API
      - "9001:9001"  # Web Console
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # MinIO Client - Auto-create bucket on startup
  minio-setup:
    image: docker.io/minio/mc:latest
    container_name: threefive-minio-setup
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      echo 'Waiting for MinIO to be ready...';
      sleep 5;
      /usr/bin/mc alias set myminio http://minio:9000 minioadmin minioadmin123;
      /usr/bin/mc mb myminio/threefive-media --ignore-existing;
      /usr/bin/mc anonymous set download myminio/threefive-media;
      echo 'MinIO bucket created successfully!';
      exit 0;
      "

volumes:
  postgres_data:
    driver: local
  minio_data:
    driver: local
